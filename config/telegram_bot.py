"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è production-ready –≤–µ—Ä—Å–∏—è
"""

import asyncio
import logging
import time
from typing import Optional, Dict, Any, List
from datetime import datetime
from collections import deque
import traceback

try:
    from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    from telegram.error import TimedOut, NetworkError, TelegramError, RetryAfter
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False

from config.config_loader import config_loader


class TelegramBot:
    """
    Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    
    def __init__(self, token: str, chat_id: str, trading_bot_instance):
        self.token = token
        self.chat_id = chat_id
        self.trading_bot = trading_bot_instance
        
        self.logger = logging.getLogger("TelegramBot")
        self.application = None
        self.is_running = False
        
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_queue = asyncio.Queue(maxsize=1000)
        self.consumer_task = None
        self.max_retries = 5
        self.base_retry_delay = 0.5
        
        # –°—á–µ—Ç—á–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏
        self.messages_sent = 0
        self.messages_failed = 0
        self.last_error_time = 0
        
        if not TELEGRAM_AVAILABLE:
            self.logger.warning("Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—É—Å–∫–æ–º consumer'–∞
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        """
        try:
            if not TELEGRAM_AVAILABLE:
                self.logger.warning("Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
                return False
            
            if not self.token or not self.chat_id:
                self.logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –¥–ª—è Telegram")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.token).build()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            try:
                bot_info = await self.application.bot.get_me()
                self.logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
            await self._set_bot_commands()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π consumer –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self._start_notification_consumer()
            
            self.is_running = True
            self.logger.info("‚úÖ Telegram –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            return False
    
    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
            await self.application.bot.delete_my_commands()
            self.logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Vortex Trading Bot
            commands = [
                BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
                BotCommand("balance", "üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"),
                BotCommand("positions", "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"),
                BotCommand("mode", "‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"),
                BotCommand("risk", "üõ°Ô∏è –°—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤"),
                BotCommand("risk_show", "üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã"),
                BotCommand("risk_set", "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç"),
                BotCommand("risk_enable", "üîÑ –í–∫–ª/–≤—ã–∫–ª —Ä–∏—Å–∫–∏"),
                BotCommand("risk_reset", "üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤"),
                BotCommand("help", "üÜò –ü–æ–º–æ—â—å")
            ]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
            await self.application.bot.set_my_commands(commands)
            self.logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
            await self.application.bot.set_my_description(
                "Vortex Trading Bot v2.1 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            await self.application.bot.set_my_short_description(
                "–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å Vortex Bands —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self.application.add_handler(CommandHandler("start", self._start_command))
            self.application.add_handler(CommandHandler("status", self._status_command))
            self.application.add_handler(CommandHandler("balance", self._balance_command))
            self.application.add_handler(CommandHandler("positions", self._positions_command))
            self.application.add_handler(CommandHandler("mode", self._mode_command))
            self.application.add_handler(CommandHandler("help", self._help_command))
            
            # –ö–æ–º–∞–Ω–¥—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            self.application.add_handler(CommandHandler("risk", self._risk_command))
            self.application.add_handler(CommandHandler("risk_show", self._risk_show_command))
            self.application.add_handler(CommandHandler("risk_set", self._risk_set_command))
            self.application.add_handler(CommandHandler("risk_enable", self._risk_enable_command))
            self.application.add_handler(CommandHandler("risk_reset", self._risk_reset_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
            self.application.add_handler(
                MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_buttons)
            )
            
            self.logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ 11 –∫–æ–º–∞–Ω–¥ –∏ 1 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
    
    async def _start_notification_consumer(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ consumer'–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if self.consumer_task and not self.consumer_task.done():
                self.logger.warning("Consumer —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            self.consumer_task = asyncio.create_task(self._notification_consumer())
            self.logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π consumer –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ consumer'–∞: {e}")
    
    async def _notification_consumer(self):
        """–§–æ–Ω–æ–≤—ã–π consumer –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        self.logger.info("üîÑ Consumer —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–∂–¥—ë–º –º–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥—É)
                try:
                    notification = await asyncio.wait_for(
                        self.notification_queue.get(), 
                        timeout=1.0
                    )
                except asyncio.TimeoutError:
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å retry –ª–æ–≥–∏–∫–æ–π
                await self._send_with_retry(notification)
                
            except asyncio.CancelledError:
                self.logger.info("Consumer —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ consumer'–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(1)
    
    async def _send_with_retry(self, notification: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å retry –∏ exponential backoff"""
        message = notification.get('message', '')
        parse_mode = notification.get('parse_mode', 'Markdown')
        chat_id = notification.get('chat_id', self.chat_id)
        
        for attempt in range(self.max_retries):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown
                result = await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode=parse_mode
                )
                
                if result:
                    self.messages_sent += 1
                    self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    return
                else:
                    self.logger.warning("‚ö†Ô∏è send_message –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    
            except RetryAfter as e:
                # Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å
                wait_time = e.retry_after
                self.logger.warning(f"Rate limit hit, –∂–¥—ë–º {wait_time}—Å")
                await asyncio.sleep(wait_time)
                
            except (TimedOut, NetworkError) as e:
                # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ - –¥–µ–ª–∞–µ–º retry
                wait_time = self.base_retry_delay * (2 ** attempt)
                self.logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}, retry —á–µ—Ä–µ–∑ {wait_time}—Å")
                await asyncio.sleep(wait_time)
                
            except TelegramError as e:
                # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram
                if "can't parse entities" in str(e).lower() or "bad request" in str(e).lower():
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown: {e}")
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        result = await self.application.bot.send_message(
                            chat_id=chat_id,
                            text=message,
                            parse_mode=None  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                        )
                        if result:
                            self.messages_sent += 1
                            self.logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ plain text")
                            return
                    except Exception as fallback_error:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ plain text: {fallback_error}")
                else:
                    self.logger.error(f"Telegram –æ—à–∏–±–∫–∞: {e}")
                
                self.messages_failed += 1
                return
                
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                self.logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.messages_failed += 1
                return
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        self.messages_failed += 1
        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    
    # ===========================================
    # –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    # ===========================================
    
    @staticmethod
    def _escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
        # –°–∏–º–≤–æ–ª—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ MarkdownV2
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in special_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    async def send_message(self, message: str, parse_mode: str = 'Markdown', escape: bool = False):
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å)"""
        try:
            if not self.is_running or not self.application:
                self.logger.warning("Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return False
            
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if escape and parse_mode in ['Markdown', 'MarkdownV2']:
                message = self._escape_markdown(message)
            
            notification = {
                'message': message,
                'parse_mode': parse_mode,
                'chat_id': self.chat_id,
                'timestamp': time.time()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            try:
                self.notification_queue.put_nowait(notification)
                self.logger.debug(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä: {self.notification_queue.qsize()})")
                return True
            except asyncio.QueueFull:
                self.logger.error("‚ùå –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
    
    async def send_signal(self, symbol: str, side: str, price: float, reason: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TradingEngine)"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å —Ä–∞–∑—É–º–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        price_str = f"{price:.6f}".rstrip('0').rstrip('.')
        
        message = (
            f"üì¢ *–°–ò–ì–ù–ê–õ*\n\n"
            f"üìä {symbol}\n"
            f"üéØ {side}\n"
            f"üí∞ –¶–µ–Ω–∞: {price_str}\n"
        )
        
        if reason:
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º reason –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(reason) > 100:
                reason = reason[:97] + "..."
            message += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        
        message += f"üïí {datetime.now().strftime('%H:%M:%S')}"
        
        return await self.send_message(message)
    
    async def send_trading_engine_signal(self, symbol: str, signal_type: str, price: float, 
                                        config: str = "", reason: str = ""):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç TradingEngine"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        price_str = f"{price:.6f}".rstrip('0').rstrip('.')
        
        message = f"üì¢ {symbol} - –°–∏–≥–Ω–∞–ª {signal_type}: —Ü–µ–Ω–∞ {price_str}"
        
        if config:
            message += f", –∫–æ–Ω—Ñ–∏–≥ {config}"
        
        if reason:
            # –û—á–∏—â–∞–µ–º reason –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_reason = reason.replace('_', ' ').replace('*', '').replace('`', '')
            message += f", –ø—Ä–∏—á–∏–Ω–∞: {clean_reason}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ Markdown
        return await self.send_message(message, parse_mode=None)
    
    async def notify(self, message: str):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self.send_message(message)
    
    # ===========================================
    # –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
    # ===========================================
    
    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        try:
            user = update.effective_user
            self.logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_status = "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            try:
                telegram_config = config_loader.get_config("telegram")
                bot_config = telegram_config.get("bot", {})
                if bot_config.get("token") and bot_config.get("chat_id"):
                    config_status += f"\nüì± Chat ID: {bot_config.get('chat_id')}"
                else:
                    config_status = "‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è"
            except:
                config_status = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            
            message = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "üöÄ *Vortex Trading Bot v2.1*\n"
                "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏\n\n"
                f"{config_status}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n"
                "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
            )
            
            keyboard = self._get_main_keyboard()
            await update.message.reply_text(
                message, 
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    async def _status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        try:
            bot = self.trading_bot
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if bot.is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            uptime = time.time() - bot.start_time if hasattr(bot, 'start_time') else 0
            uptime_hours = uptime / 3600
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            signals = getattr(bot, 'signals_count', 0)
            trades = getattr(bot, 'trades_count', 0)
            positions_count = len(bot.positions) if hasattr(bot, 'positions') else 0
            
            message = (
                "üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´*\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–†–µ–∂–∏–º: {bot.mode if hasattr(bot, 'mode') else 'N/A'}\n"
                f"Uptime: {uptime_hours:.1f}—á\n\n"
                f"üìà –°–∏–≥–Ω–∞–ª–æ–≤: {signals}\n"
                f"üíº –°–¥–µ–ª–æ–∫: {trades}\n"
                f"üìä –ü–æ–∑–∏—Ü–∏–π: {positions_count}/10\n\n"
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.messages_sent}\n"
                f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {self.messages_failed}\n"
                f"üì¨ –í –æ—á–µ—Ä–µ–¥–∏: {self.notification_queue.qsize()}"
            )
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /balance"""
        try:
            if not hasattr(self.trading_bot, 'exchange') or not self.trading_bot.exchange:
                await update.message.reply_text("‚ö†Ô∏è –ë–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                return
            
            balance = await self.trading_bot.exchange.get_balance()
            if balance:
                message = (
                    "üí∞ *–ë–ê–õ–ê–ù–° –ê–ö–ö–ê–£–ù–¢–ê*\n\n"
                    f"Wallet: {balance.wallet_balance:.2f} USDT\n"
                    f"Available: {balance.available_balance:.2f} USDT\n"
                    f"Used: {balance.position_margin:.2f} USDT\n"
                    f"Unrealized PnL: {balance.unrealized_pnl:.2f} USDT"
                )
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balance: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _positions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /positions"""
        try:
            if not hasattr(self.trading_bot, 'positions'):
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö")
                return
            
            positions = self.trading_bot.positions
            
            if not positions:
                message = "üìä *–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π*"
            else:
                message = f"üìà *–û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ({len(positions)}/10)*\n\n"
                
                for symbol, pos in positions.items():
                    hold_time = (time.time() - pos.get('open_time', 0)) / 3600
                    side_emoji = "üü¢" if pos['side'] == "Buy" else "üî¥"
                    
                    message += (
                        f"{side_emoji} *{symbol}*\n"
                        f"  ‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos['side']}\n"
                        f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {pos['size']:.6f}\n"
                        f"  ‚Ä¢ –í—Ö–æ–¥: {pos['entry']:.6f}\n"
                        f"  ‚Ä¢ –í—Ä–µ–º—è: {hold_time:.1f}—á\n\n"
                    )
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /positions: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _mode_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /mode"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            user_id = update.effective_user.id
            if not await self._is_admin_user(user_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞")
                return
            
            args = context.args
            
            if not args:
                current_mode = getattr(self.trading_bot, 'mode', 'unknown')
                message = (
                    f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{current_mode}*\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
                    "‚Ä¢ `auto` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\n"
                    "‚Ä¢ `signals` - —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/mode [auto|signals]`"
                )
            else:
                new_mode = args[0].lower()
                if new_mode in ['auto', 'signals']:
                    self.trading_bot.mode = new_mode
                    message = f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{new_mode}*"
                else:
                    message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: auto –∏–ª–∏ signals"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mode: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _risk_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk - –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤"""
        try:
            if not hasattr(self.trading_bot, 'risk_manager') or not self.trading_bot.risk_manager:
                await update.message.reply_text("‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            status = await self.trading_bot.risk_manager.get_risk_status()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å
            enabled = "‚úÖ –í–∫–ª—é—á–µ–Ω" if status.get('enabled', False) else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
            trading = "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∞" if status.get('can_trade', False) else "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
            
            daily_stats = status.get('daily', {})
            daily_loss = daily_stats.get('current_loss', 0)
            daily_limit = daily_stats.get('max_loss', 0)
            
            message = (
                "üõ°Ô∏è *–°–¢–ê–¢–£–° –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê*\n\n"
                f"–°—Ç–∞—Ç—É—Å: {enabled}\n"
                f"–¢–æ—Ä–≥–æ–≤–ª—è: {trading}\n\n"
                f"üìä –î–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫: {daily_loss:.2f} / {daily_limit:.2f} USDT\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            warnings = status.get('warnings', [])
            if warnings:
                message += "\n‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:*\n"
                for warning in warnings[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3
                    message += f"‚Ä¢ {warning}\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /risk: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _risk_show_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_show - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã"""
        try:
            if not hasattr(self.trading_bot, 'risk_manager') or not self.trading_bot.risk_manager:
                await update.message.reply_text("‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            limits = await self.trading_bot.risk_manager.get_current_limits()
            
            message = "üìã *–î–ï–¢–ê–õ–¨–ù–´–ï –õ–ò–ú–ò–¢–´ –†–ò–°–ö–û–í*\n\n"
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            message += "*–õ–∏–º–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π:*\n"
            pos_limits = limits.get('position', {})
            message += f"‚Ä¢ Max –ø–æ–∑–∏—Ü–∏–π: {pos_limits.get('max_positions', 'N/A')}\n"
            message += f"‚Ä¢ Max –Ω–∞ —Å–∏–º–≤–æ–ª: {pos_limits.get('max_position_size', 'N/A')} USDT\n"
            message += f"‚Ä¢ Max leverage: {pos_limits.get('max_leverage', 'N/A')}x\n\n"
            
            # –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            message += "*–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:*\n"
            daily = limits.get('daily', {})
            message += f"‚Ä¢ Max —É–±—ã—Ç–æ–∫: {daily.get('max_abs_loss', 'N/A')} USDT\n"
            message += f"‚Ä¢ Max —É–±—ã—Ç–æ–∫ %: {daily.get('max_pct_loss', 'N/A')}%\n"
            message += f"‚Ä¢ Max —Å–¥–µ–ª–æ–∫: {daily.get('max_trades', 'N/A')}\n\n"
            
            # –ù–µ–¥–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            message += "*–ù–µ–¥–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã:*\n"
            weekly = limits.get('weekly', {})
            message += f"‚Ä¢ Max —É–±—ã—Ç–æ–∫: {weekly.get('max_abs_loss', 'N/A')} USDT\n\n"
            
            # Circuit breaker
            cb = limits.get('circuit_breaker', {})
            if cb.get('enabled'):
                message += "*Circuit Breaker:* ‚úÖ\n"
                message += f"‚Ä¢ –°—Ç–æ–ø –ø–æ—Å–ª–µ {cb.get('consecutive_losses', 'N/A')} —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /risk_show: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _risk_set_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_set - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            user_id = update.effective_user.id
            if not await self._is_admin_user(user_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤")
                return
            
            args = context.args
            
            if len(args) < 2:
                message = (
                    "‚öôÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–æ–≤*\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "`/risk_set <–ø—É—Ç—å> <–∑–Ω–∞—á–µ–Ω–∏–µ>`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ `/risk_set daily.max_abs_loss 250`\n"
                    "‚Ä¢ `/risk_set position.max_leverage 5`\n"
                    "‚Ä¢ `/risk_set circuit_breaker.enabled true`"
                )
            else:
                path = args[0]
                value = args[1]
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø
                if value.lower() in ['true', 'false']:
                    value = value.lower() == 'true'
                else:
                    try:
                        value = float(value)
                        if value == int(value):
                            value = int(value)
                    except:
                        pass
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                success = await self.trading_bot.risk_manager.update_limit(path, value)
                
                if success:
                    message = f"‚úÖ –õ–∏–º–∏—Ç {path} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {value}"
                else:
                    message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç {path}"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /risk_set: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _risk_enable_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_enable - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            user_id = update.effective_user.id
            if not await self._is_admin_user(user_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º")
                return
            
            args = context.args
            
            if not args:
                current = self.trading_bot.risk_manager.enabled
                status = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if current else "üî¥ –≤—ã–∫–ª—é—á–µ–Ω"
                message = (
                    f"üõ°Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Å–µ–π—á–∞—Å: {status}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "`/risk_enable true` - –≤–∫–ª—é—á–∏—Ç—å\n"
                    "`/risk_enable false` - –≤—ã–∫–ª—é—á–∏—Ç—å"
                )
            else:
                enable = args[0].lower() == 'true'
                self.trading_bot.risk_manager.enabled = enable
                status = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if enable else "üî¥ –≤—ã–∫–ª—é—á–µ–Ω"
                message = f"–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç {status}"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /risk_enable: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _risk_reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_reset - —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            user_id = update.effective_user.id
            if not await self._is_admin_user(user_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤")
                return
            
            args = context.args
            
            if not args:
                message = (
                    "üîÑ *–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–∏—Å–∫–æ–≤*\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "`/risk_reset daily` - —Å–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ\n"
                    "`/risk_reset weekly` - —Å–±—Ä–æ—Å–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–µ\n"
                    "`/risk_reset all` - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ"
                )
            else:
                reset_type = args[0].lower()
                
                if reset_type == 'daily':
                    await self.trading_bot.risk_manager.reset_daily_counters()
                    message = "‚úÖ –î–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã"
                elif reset_type == 'weekly':
                    await self.trading_bot.risk_manager.reset_weekly_counters()
                    message = "‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã"
                elif reset_type == 'all':
                    await self.trading_bot.risk_manager.reset_all_counters()
                    message = "‚úÖ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã"
                else:
                    message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: daily, weekly –∏–ª–∏ all"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /risk_reset: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        message = (
            "üÜò *–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "üìä `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "üí∞ `/balance` - –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "üìà `/positions` - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚öôÔ∏è `/mode [auto|signals]` - –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n\n"
            
            "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:*\n"
            "üõ°Ô∏è `/risk` - –ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤\n"
            "üìã `/risk_show` - –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã\n"
            "‚öôÔ∏è `/risk_set <path> <value>` - –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç\n"
            "üîÑ `/risk_enable true|false` - –í–∫–ª/–≤—ã–∫–ª —Ä–∏—Å–∫–∏\n"
            "üîÑ `/risk_reset daily|weekly|all` - –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤\n\n"
            
            "*–ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏:*\n"
            "‚Ä¢ `/risk_set daily.max_abs_loss 250`\n"
            "‚Ä¢ `/risk_set position.max_leverage 5`\n"
            "‚Ä¢ `/risk_enable false`\n"
            "‚Ä¢ `/risk_reset daily`\n\n"
            
            "üîò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
        )
        
        keyboard = self._get_main_keyboard()
        await update.message.reply_text(
            message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def _handle_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        try:
            text = update.message.text
            
            button_commands = {
                "üìä –°—Ç–∞—Ç—É—Å": self._status_command,
                "üí∞ –ë–∞–ª–∞–Ω—Å": self._balance_command,
                "üìà –ü–æ–∑–∏—Ü–∏–∏": self._positions_command,
                "üõ°Ô∏è –†–∏—Å–∫–∏": self._risk_command,
                "‚öôÔ∏è –†–µ–∂–∏–º": self._mode_command,
                "üÜò –ü–æ–º–æ—â—å": self._help_command
            }
            
            handler = button_commands.get(text)
            if handler:
                await handler(update, context)
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã."
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    def _get_main_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏"), KeyboardButton("üõ°Ô∏è –†–∏—Å–∫–∏")],
            [KeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º"), KeyboardButton("üÜò –ü–æ–º–æ—â—å")]
        ]
        
        return ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
        )
    
    async def _is_admin_user(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            telegram_config = config_loader.get_config("telegram")
            admin_ids = telegram_config.get("users", {}).get("admin_users", [])
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            admin_ids_str = [str(aid) for aid in admin_ids]
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π chat_id
            if not admin_ids_str:
                return str(user_id) == str(self.chat_id)
            
            return str(user_id) in admin_ids_str
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞: {e}")
            return False
    
    # ===========================================
    # –ú–ï–¢–û–î–´ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê
    # ===========================================
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            if not self.application:
                self.logger.warning("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.application.start()
            await self.application.updater.start_polling()
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        try:
            self.is_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º consumer
            if self.consumer_task and not self.consumer_task.done():
                self.consumer_task.cancel()
                try:
                    await self.consumer_task
                except asyncio.CancelledError:
                    pass
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if self.application:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        await self.start()
    
    # ===========================================
    # –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    # ===========================================
    
    async def send_startup_message(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        message = (
            "üöÄ *Vortex Trading Bot v2.1 –∑–∞–ø—É—â–µ–Ω!*\n\n"
            f"‚öôÔ∏è –†–µ–∂–∏–º: {getattr(self.trading_bot, 'mode', 'N/A')}\n"
            f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M:%S')}\n\n"
            "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ\n"
            "üõ°Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        )
        
        return await self.send_message(message)
    
    async def send_shutdown_message(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        uptime = time.time() - getattr(self.trading_bot, 'start_time', time.time())
        uptime_hours = uptime / 3600
        
        message = (
            "üõë *Vortex Trading Bot –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É*\n\n"
            f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f}—á\n"
            f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_sent}\n"
            f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {self.messages_failed}\n"
            f"üïí –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%H:%M:%S')}\n\n"
            "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"
        )
        
        return await self.send_message(message)
    
    async def send_trade_notification(self, symbol: str, side: str, size: float, 
                                    price: float, reason: str = ""):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        side_emoji = "üìà" if side == "Buy" else "üìâ"
        
        message = (
            f"{side_emoji} *–°–î–ï–õ–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê*\n\n"
            f"üí∞ –°–∏–º–≤–æ–ª: {symbol}\n"
            f"üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}\n"
            f"üî¢ –†–∞–∑–º–µ—Ä: {size:.6f}\n"
            f"üíµ –¶–µ–Ω–∞: {price:.6f}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        if reason:
            message += f"\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        
        return await self.send_message(message)
    
    async def send_position_notification(self, symbol: str, side: str, size: float, 
                                       entry_price: float, strategy: str = ""):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        side_emoji = "üìà" if side == "Buy" else "üìâ"
        
        message = (
            f"{side_emoji} *–ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê*\n\n"
            f"üí∞ –°–∏–º–≤–æ–ª: {symbol}\n"
            f"üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}\n"
            f"üî¢ –†–∞–∑–º–µ—Ä: {size:.6f}\n"
            f"üéØ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.6f}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        if strategy:
            message += f"\nüéÆ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}"
        
        return await self.send_message(message)
    
    async def send_position_closed_notification(self, symbol: str, side: str, 
                                              pnl: float, pnl_pct: float, reason: str = ""):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        pnl_emoji = "üìà" if pnl >= 0 else "üìâ"
        
        message = (
            f"{pnl_emoji} *–ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê*\n\n"
            f"üí∞ –°–∏–º–≤–æ–ª: {symbol}\n"
            f"üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}\n"
            f"üíµ P&L: *{pnl:+.2f} USDT*\n"
            f"üìä P&L: *{pnl_pct:+.2f}%*\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        if reason:
            message += f"\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        
        return await self.send_message(message)
    
    async def send_risk_alert(self, alert_type: str, message_text: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö"""
        alert_emoji = {
            "warning": "‚ö†Ô∏è",
            "danger": "üö®",
            "info": "‚ÑπÔ∏è",
            "critical": "üÜò"
        }.get(alert_type, "üì¢")
        
        message = (
            f"{alert_emoji} *–†–ò–°–ö –ê–õ–ï–†–¢*\n\n"
            f"{message_text}\n\n"
            f"üïí {datetime.now().strftime('%H:%M:%S')}"
        )
        
        return await self.send_message(message)