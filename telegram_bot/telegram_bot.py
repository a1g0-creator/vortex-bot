"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è production-ready –≤–µ—Ä—Å–∏—è
"""

import asyncio
import logging
import time
from typing import Optional, Dict, Any, List
from datetime import datetime
from collections import deque
import traceback

try:
    from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, ReplyKeyboardRemove
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    from telegram.error import TimedOut, NetworkError, TelegramError, RetryAfter
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False

from config.config_loader import config_loader


class TelegramBot:
    """
    Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    
    def __init__(self, token: str, chat_id: str, trading_bot_instance):
        self.token = token
        self.chat_id = chat_id
        self.trading_bot = trading_bot_instance
        
        self.application: Optional[Application] = None
        self.logger = logging.getLogger("TelegramBot")
        
        # –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ consumer
        self.notification_queue: asyncio.Queue = asyncio.Queue(maxsize=1000)
        self.consumer_task: Optional[asyncio.Task] = None
        
        # –†–µ—Ç—Ä–∞–∏
        self.max_retries = 5
        self.backoff_steps = [0.5, 1.0, 2.0, 5.0, 10.0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.messages_sent = 0
        self.messages_failed = 0
        
        # –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False
        
        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
        self.last_errors = deque(maxlen=50)
        
        # –î–ª—è /status
        self.start_time = time.time()
        
        if not TELEGRAM_AVAILABLE:
            self.logger.warning("Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—É—Å–∫–æ–º consumer'–∞
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        """
        try:
            if not TELEGRAM_AVAILABLE:
                self.logger.warning("Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
                return False
            
            if not self.token or not self.chat_id:
                self.logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –¥–ª—è Telegram")
                return False
            
            # –ü–æ–¥–±–∏—Ä–∞–µ–º chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
            if not self.chat_id:
                selected = self._select_chat_id_from_config()
                if selected:
                    self.chat_id = selected
                    self.logger.info(f"üì± –í—ã–±—Ä–∞–Ω chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {self.chat_id}")
                else:
                    self.logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ telegram.yaml (bot.chat_id/admin_chat_id/channel_id)")
                    return False

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.token).build()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            try:
                bot_info = await self.application.bot.get_me()
                self.logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
            await self._set_bot_commands()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π consumer –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self._start_notification_consumer()
            
            self.is_running = True
            self.start_time = time.time()
            self.logger.info("‚úÖ Telegram –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            self.logger.error(traceback.format_exc())
            return False

    def _select_chat_id_from_config(self) -> Optional[str]:
        """–í—ã–±–æ—Ä chat_id –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏–∑ telegram.yaml: chat_id ‚Üí admin_chat_id ‚Üí channel_id"""
        try:
            telegram_cfg = config_loader.get_config("telegram")
            bot_cfg = telegram_cfg.get("bot", {})
            candidates = [
                bot_cfg.get("chat_id"),
                bot_cfg.get("admin_chat_id"),
                bot_cfg.get("channel_id"),
            ]
            for cid in candidates:
                if cid:
                    return str(cid)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è telegram.yaml: {e}")
        return None

    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö scopes
            await self.application.bot.delete_my_commands(scope=None, language_code=None)
            await self.application.bot.delete_my_commands(scope=None, language_code="ru")
            await self.application.bot.delete_my_commands(scope=None, language_code="en")
            self.logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Vortex Trading Bot
            commands = [
                BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
                BotCommand("balance", "üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"),
                BotCommand("positions", "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"),
                BotCommand("mode", "‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"),
                BotCommand("risk", "üõ°Ô∏è –°—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤"),
                BotCommand("risk_show", "üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã"),
                BotCommand("risk_set", "üîß –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç"),
                BotCommand("risk_enable", "‚úÖ –í–∫–ª—é—á–∏—Ç—å —Ä–∏—Å–∫–∏"),
                BotCommand("risk_disable", "‚õî –í—ã–∫–ª—é—á–∏—Ç—å —Ä–∏—Å–∫–∏"),
                BotCommand("risk_reset", "üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤"),
                BotCommand("help", "üÜò –°–ø—Ä–∞–≤–∫–∞"),
            ]
            
            await self.application.bot.set_my_commands(commands)
            self.logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self.application.add_handler(CommandHandler("start", self._cmd_start))
            self.application.add_handler(CommandHandler("status", self._cmd_status))
            self.application.add_handler(CommandHandler("balance", self._cmd_balance))
            self.application.add_handler(CommandHandler("positions", self._cmd_positions))
            self.application.add_handler(CommandHandler("mode", self._cmd_mode))
            self.application.add_handler(CommandHandler("help", self._cmd_help))

            # –ö–æ–º–∞–Ω–¥—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            self.application.add_handler(CommandHandler("risk", self._cmd_risk))
            self.application.add_handler(CommandHandler("risk_show", self._cmd_risk_show))
            self.application.add_handler(CommandHandler("risk_set", self._cmd_risk_set))
            self.application.add_handler(CommandHandler("risk_enable", self._cmd_risk_enable))
            self.application.add_handler(CommandHandler("risk_disable", self._cmd_risk_disable))
            self.application.add_handler(CommandHandler("risk_reset", self._cmd_risk_reset))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
            self.application.add_handler(
                MessageHandler(filters.TEXT & ~filters.COMMAND, self._on_button_click)
            )

            self.logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ 12 –∫–æ–º–∞–Ω–¥ –∏ 1 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")


    async def _start_notification_consumer(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ consumer'–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if self.consumer_task and not self.consumer_task.done():
                self.logger.warning("Consumer —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            self.consumer_task = asyncio.create_task(self._notification_consumer())
            self.logger.info("üîß –§–æ–Ω–æ–≤—ã–π consumer —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ consumer'–∞: {e}")

    async def _notification_consumer(self):
        """–§–æ–Ω–æ–≤—ã–π consumer –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        self.logger.info("üîÑ Consumer —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–∂–¥—ë–º –º–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥—É)
                try:
                    notification = await asyncio.wait_for(
                        self.notification_queue.get(), timeout=1.0
                    )
                except asyncio.TimeoutError:
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–∞–¥—ë–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
                await self._send_with_retry(notification)
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.notification_queue.task_done()
                
            except asyncio.CancelledError:
                self.logger.info("Consumer —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–º–µ–Ω—ë–Ω")
                break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ consumer: {e}")
                await asyncio.sleep(1)
        
        self.logger.info("üõë Consumer —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

    async def _send_with_retry(self, notification: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff"""
        message = notification.get('message', '')
        parse_mode = notification.get('parse_mode', 'Markdown')
        chat_id = notification.get('chat_id', self.chat_id)
        reply_markup = notification.get('reply_markup')
        
        for attempt in range(self.max_retries):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                
                self.messages_sent += 1
                self.logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                return
                
            except RetryAfter as e:
                # Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å
                delay = e.retry_after + 0.1
                self.logger.warning(f"‚è±Ô∏è Rate limit: –∂–¥—É {delay} —Å–µ–∫")
                await asyncio.sleep(delay)
            except (TimedOut, NetworkError) as e:
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ç–∏ - —Ä–µ—Ç—Ä–∞–∏ —Å backoff
                delay = self.backoff_steps[min(attempt, len(self.backoff_steps)-1)]
                self.logger.warning(f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}. –†–µ—Ç—Ä–∞–π —á–µ—Ä–µ–∑ {delay} —Å–µ–∫")
                await asyncio.sleep(delay)
            except TelegramError as e:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram - –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º
                self.messages_failed += 1
                self.last_errors.append((time.time(), str(e)))
                self.logger.error(f"‚ùå TelegramError –±–µ–∑ —Ä–µ—Ç—Ä–∞—è: {e}")
                return
            except Exception as e:
                delay = self.backoff_steps[min(attempt, len(self.backoff_steps)-1)]
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}. –†–µ—Ç—Ä–∞–π —á–µ—Ä–µ–∑ {delay} —Å–µ–∫")
                await asyncio.sleep(delay)

        self.messages_failed += 1
        self.logger.error("‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def _get_main_keyboard(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π"""
        keyboard = [
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏"), KeyboardButton("üõ°Ô∏è –†–∏—Å–∫–∏")],
            [KeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º"), KeyboardButton("üÜò –ü–æ–º–æ—â—å")]
        ]
        
        return ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False,
            selective=False,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
        )

    # ===== –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –Ø–î–†–ê =====

    async def send_message(self, message: str, parse_mode: str = 'Markdown', escape: bool = False, reply_markup=None) -> bool:
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–ª–∞–¥—ë—Ç –≤ –æ—á–µ—Ä–µ–¥—å). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç reply_markup."""
        try:
            if not self.is_running or not self.application:
                self.logger.warning("Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return False

            if escape and parse_mode in ['Markdown', 'MarkdownV2']:
                message = self._escape_markdown_v2(message)

            notification = {
                'message': message,
                'parse_mode': parse_mode,
                'chat_id': self.chat_id,
                'reply_markup': reply_markup,
                'timestamp': time.time()
            }
            
            try:
                self.notification_queue.put_nowait(notification)
                self.logger.debug(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä: {self.notification_queue.qsize()})")
                return True
            except asyncio.QueueFull:
                self.logger.error("‚ùå –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False

    # –û–±—Ä–∞—Ç–Ω–æ-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def notify(self, message: str, parse_mode: str = 'Markdown', escape: bool = False) -> bool:
        return await self.send_message(message, parse_mode=parse_mode, escape=escape)

    async def notify_risk(self, message: str, parse_mode: str = 'Markdown', escape: bool = False) -> bool:
        return await self.send_message(message, parse_mode=parse_mode, escape=escape)

    async def notify_signal(self, symbol: str, side: str, price: float, reason: str = "") -> bool:
        return await self.send_signal(symbol, side, price, reason)

    async def send_signal(self, symbol: str, side: str, price: float, reason: str = "") -> bool:
        emoji = "üü¢" if side.upper() == "BUY" else "üî¥"
        message = (
            f"{emoji} *–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ*\n"
            f"üìä {self._escape_md(symbol)}\n"
            f"üéØ {side.upper()}\n"
            f"üí∞ –¶–µ–Ω–∞: {price}\n"
        )
        if reason:
            message += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {self._escape_md(reason)}"
        
        return await self.send_message(message)

    async def send_startup_message(self) -> bool:
        if not self.application:
            self.logger.warning("send_startup_message: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return False
        try:
            await self._send_with_retry({
                'message': "‚è≥ –û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é‚Ä¶",
                'parse_mode': 'Markdown',
                'chat_id': self.chat_id,
                'reply_markup': ReplyKeyboardRemove()
            })
        except Exception as e:
            self.logger.warning(f"send_startup_message: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é: {e}")
        msg = (
            "ü§ñ *Vortex Trading Bot v2.1*\n"
            "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
            "–ù–∏–∂–µ ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏: /help"
        )
        keyboard = self._get_main_keyboard()
        return await self.send_message(msg, parse_mode='Markdown', reply_markup=keyboard)

    # ===== –ö–û–ú–ê–ù–î–´ =====

    async def _cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id})")
        config_status = "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        try:
            telegram_config = config_loader.get_config("telegram")
            bot_config = telegram_config.get("bot", {})
            if bot_config.get("token") and bot_config.get("chat_id"):
                config_status += f"\nüì± Chat ID: `{bot_config.get('chat_id')}`"
            else:
                config_status = "‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è"
        except:
            config_status = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        try:
            await update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
        except Exception:
            pass
        message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "üöÄ *Vortex Trading Bot v2.1*\n"
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏\n\n"
            f"{config_status}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n"
            "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
        )
        keyboard = self._get_main_keyboard()
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

    async def _cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        bot = self.trading_bot
        status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if bot.is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        uptime = time.time() - self.start_time
        uptime_hours = uptime / 3600
        message = (
            f"üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´*\n\n"
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}\n"
            f"Uptime: {uptime_hours:.2f} —á\n"
            f"‚è±Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è: OK={self.messages_sent} / FAIL={self.messages_failed}"
        )
        if hasattr(bot, 'mode'):
            message += f"\nüîß –†–µ–∂–∏–º: `{bot.mode}`"
        await update.message.reply_text(message, parse_mode='Markdown')

    async def _cmd_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if hasattr(self.trading_bot, 'exchange') and self.trading_bot.exchange:
            try:
                balance_info = await self.trading_bot.exchange.get_balance()
                if balance_info and hasattr(balance_info, 'total_wallet_balance'):
                    message = f"üí∞ *–ë–ê–õ–ê–ù–° –ê–ö–ö–ê–£–ù–¢–ê*\n\n`{balance_info.total_wallet_balance:.2f}` USDT"
                elif balance_info and isinstance(balance_info, dict):
                    message = "üí∞ *–ë–ê–õ–ê–ù–° –ê–ö–ö–ê–£–ù–¢–ê*\n\n"
                    for currency, amount in balance_info.items():
                        if float(amount) > 0:
                            message += f"*{self._escape_md(currency)}*: `{amount}`\n"
                else:
                    message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"
            except Exception as e:
                message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}"
        else:
            message = "‚ö†Ô∏è –ë–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
        await update.message.reply_text(message, parse_mode='Markdown')

    async def _cmd_positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if hasattr(self.trading_bot, 'exchange') and self.trading_bot.exchange:
            try:
                positions = await self.trading_bot.exchange.get_positions()
                if positions:
                    message = "üìà *–û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò*\n\n"
                    for pos in positions:
                        if float(pos.get('size', 0)) != 0:
                            pnl_emoji = "üü¢" if float(pos.get('unrealizedPnl', 0)) >= 0 else "üî¥"
                            message += (
                                f"*{self._escape_md(pos.get('symbol'))}* "
                                f"`{pos.get('side', 'N/A')}` `{pos.get('size', 'N/A')}`\n"
                                f"  {pnl_emoji} PnL: `{pos.get('unrealizedPnl', 0)}` USDT\n\n"
                            )
                    if message == "üìà *–û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò*\n\n":
                        message += "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
                else:
                    message = "üìà *–û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò*\n\n–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
            except Exception as e:
                message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}"
        else:
            message = "‚ö†Ô∏è –ë–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
        await update.message.reply_text(message, parse_mode='Markdown')

    async def _cmd_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        bot = self.trading_bot
        current_mode = getattr(bot, 'mode', 'unknown')
        message = (
            f"‚öôÔ∏è *–†–ï–ñ–ò–ú –†–ê–ë–û–¢–´*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{self._escape_md(current_mode)}*\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
            "‚Ä¢ `signals` - —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã\n"
            "‚Ä¢ `auto` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\n"
            "‚Ä¢ `paper` - –±—É–º–∞–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"
        )
        await update.message.reply_text(message, parse_mode='Markdown')

    # ===== –ö–û–ú–ê–ù–î–´ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê =====

    @staticmethod
    def _escape_md(text: Any) -> str:
        """Escapes special characters for Telegram's MarkdownV1."""
        text = str(text)
        for char in ['_', '*', '`', '[']:
            text = text.replace(char, f'\\{char}')
        return text

    @staticmethod
    def _fmt(value: Any) -> str:
        """Formats a value in backticks for Markdown."""
        return f"`{value}`"

    async def _cmd_risk(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk - –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤."""
        try:
            rm = self.trading_bot.risk_manager
            if not rm:
                await update.message.reply_text("‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            status = await rm.get_status()
            enabled_str = "–≤–∫–ª—é—á–µ–Ω" if status.get('enabled', False) else "–≤—ã–∫–ª—é—á–µ–Ω"
            enabled_emoji = "‚úÖ" if status.get('enabled', False) else "‚õî"
            message = [f"üõ°Ô∏è *Risk Manager*: {enabled_emoji} {enabled_str}"]
            daily = status.get('daily', {})
            daily_loss = daily.get('realized_loss', 0)
            daily_max_loss = daily.get('max_abs_loss', '??')
            daily_trades = daily.get('used_trades', 0)
            daily_max_trades = daily.get('max_trades', '??')
            message.append(
                f"‚îú‚îÄ *Daily*: trades {self._fmt(f'{daily_trades}/{daily_max_trades}')}, "
                f"loss {self._fmt(f'{daily_loss:.2f}')} / {self._fmt(daily_max_loss)}"
            )
            weekly = status.get('weekly', {})
            weekly_loss = weekly.get('realized_loss', 0)
            weekly_max_loss = weekly.get('max_abs_loss', '??')
            message.append(
                f"‚îî‚îÄ *Weekly*: loss {self._fmt(f'{weekly_loss:.2f}')} / {self._fmt(weekly_max_loss)}"
            )
            await update.message.reply_text("\n".join(message), parse_mode='Markdown')
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /risk: {e}\n{traceback.format_exc()}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–æ–≤: {e}")

    async def _cmd_risk_show(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_show - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏–∑ risk.yaml."""
        try:
            rm = self.trading_bot.risk_manager
            if not rm:
                await update.message.reply_text("‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            limits = await rm.show_limits()
            if not limits:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–æ–≤.")
                return
            message = ["üß© *RISK LIMITS* (from risk.yaml)"]
            message.append(
                f"enabled: {self._fmt(limits.get('enabled'))}, "
                f"currency: {self._fmt(limits.get('currency'))}, "
                f"persist: {self._fmt(limits.get('persist_runtime_updates'))}"
            )
            def format_section(title: str, data: Dict[str, Any]):
                parts = [f"*{self._escape_md(title)}*:"]
                for key, value in data.items():
                    if isinstance(value, dict):
                        # Avoid curly braces to prevent internal tool errors
                        triggers_str = ", ".join([f"{k}={v}" for k, v in value.items()])
                        parts.append(f"{self._escape_md(key)}: [{triggers_str}]")
                    else:
                        parts.append(f"{self._escape_md(key)}={self._fmt(value)}")
                message.append(" ".join(parts))
            sections = ["daily", "weekly", "position", "circuit_breaker", "overtrading_protection", "adaptive_risk", "monitoring"]
            for section_name in sections:
                if section_data := limits.get(section_name):
                    format_section(section_name, section_data)
            await update.message.reply_text("\n".join(message), parse_mode='Markdown')
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /risk_show: {e}\n{traceback.format_exc()}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤: {e}")

    async def _cmd_risk_enable(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_enable. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
        if not await self._is_admin_user(update.effective_user.id):
            await update.message.reply_text("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        rm = self.trading_bot.risk_manager
        if not rm:
            await update.message.reply_text("‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        await rm.enable()
        self.logger.info(f"Risk Manager enabled by admin {update.effective_user.id}")
        await update.message.reply_text("‚úÖ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç *–≤–∫–ª—é—á–µ–Ω*.", parse_mode='Markdown')

    async def _cmd_risk_disable(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_disable. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
        if not await self._is_admin_user(update.effective_user.id):
            await update.message.reply_text("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        rm = self.trading_bot.risk_manager
        if not rm:
            await update.message.reply_text("‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        await rm.disable()
        self.logger.info(f"Risk Manager disabled by admin {update.effective_user.id}")
        await update.message.reply_text("‚õî –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç *–≤—ã–∫–ª—é—á–µ–Ω*.", parse_mode='Markdown')

    async def _cmd_risk_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_reset. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
        if not await self._is_admin_user(update.effective_user.id):
            await update.message.reply_text("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        rm = self.trading_bot.risk_manager
        if not rm:
            await update.message.reply_text("‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        arg = context.args[0].lower() if context.args else "all"
        if arg == "daily":
            await rm.reset_daily_counters(manual=True)
            message = "‚úÖ –î–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã."
        elif arg == "weekly":
            await rm.reset_weekly_counters(manual=True)
            message = "‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã."
        elif arg == "all":
            await rm.reset_counters(manual=True)
            message = "‚úÖ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ (daily, weekly) —Å–±—Ä–æ—à–µ–Ω—ã."
        else:
            message = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `daily`, `weekly` –∏–ª–∏ `all`."
        self.logger.info(f"Risk counters reset for '{arg}' by admin {update.effective_user.id}")
        await update.message.reply_text(message)

    async def _cmd_risk_set(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_set <scope> <key> <value>. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
        if not await self._is_admin_user(update.effective_user.id):
            await update.message.reply_text("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        rm = self.trading_bot.risk_manager
        if not rm:
            await update.message.reply_text("‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        if len(context.args) < 3:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/risk_set <scope> <key> <value>`\n"
                "–ü—Ä–∏–º–µ—Ä: `/risk_set daily max_abs_loss 750`",
                parse_mode='Markdown'
            )
            return
        scope, key, value_str = context.args[0], context.args[1], " ".join(context.args[2:])
        value: Any
        if value_str.lower() in ['true', 'on', 'yes', '1']: value = True
        elif value_str.lower() in ['false', 'off', 'no', '0']: value = False
        else:
            try:
                value = float(value_str) if '.' in value_str else int(value_str)
            except ValueError:
                value = value_str
        if await rm.set_limit(scope, key, value):
            response = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {self._escape_md(scope)}.{self._escape_md(key)} = {self._fmt(value)}"
            self.logger.info(f"Risk limit '{scope}.{key}' set to '{value}' by admin {update.effective_user.id}")
        else:
            response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {self._escape_md(scope)}.{self._escape_md(key)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è."
            self.logger.warning(f"Failed to set limit '{scope}.{key}' to '{value}'")
        await update.message.reply_text(response, parse_mode='Markdown')

    async def _cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        message = (
            "üÜò *–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "üìä `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "üí∞ `/balance` - –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "üìà `/positions` - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚öôÔ∏è `/mode` - –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n\n"
            "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:*\n"
            "üõ°Ô∏è `/risk` - –ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤\n"
            "üìã `/risk_show` - –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã\n"
            "üîß `/risk_set <scope> <key> <value>` - –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç\n"
            "‚úÖ `/risk_enable` - –í–∫–ª—é—á–∏—Ç—å —Ä–∏—Å–∫–∏\n"
            "‚õî `/risk_disable` - –í—ã–∫–ª—é—á–∏—Ç—å —Ä–∏—Å–∫–∏\n"
            "üîÑ `/risk_reset [daily|weekly|all]` - –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤\n\n"
            "üìò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º."
        )
        await update.message.reply_text(message, parse_mode='Markdown')

    async def _on_button_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        button_commands = {
            "üìä –°—Ç–∞—Ç—É—Å": self._cmd_status, "üí∞ –ë–∞–ª–∞–Ω—Å": self._cmd_balance,
            "üìà –ü–æ–∑–∏—Ü–∏–∏": self._cmd_positions, "üõ°Ô∏è –†–∏—Å–∫–∏": self._cmd_risk_show,
            "‚öôÔ∏è –†–µ–∂–∏–º": self._cmd_mode, "üÜò –ü–æ–º–æ—â—å": self._cmd_help
        }
        if handler := button_commands.get(update.message.text):
            await handler(update, context)
        else:
            await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

    async def _is_admin_user(self, user_id: int) -> bool:
        try:
            telegram_config = config_loader.get_config("telegram")
            admin_ids = [str(uid) for uid in telegram_config.get("users", {}).get("admin_users", [])]
            return str(user_id) in admin_ids or str(user_id) == str(self.chat_id)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False

    # ===== –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ =====
    async def run(self):
        if not self.application:
            if not await self.initialize():
                raise RuntimeError("TelegramBot.run(): initialize() failed")
        await self.start()
        try:
            await self.send_startup_message()
        except Exception as e:
            self.logger.warning(f"run(): –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    async def start(self):
        if not self.application:
            self.logger.warning("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        if (updater := getattr(self.application, "updater", None)) and getattr(updater, "running", False):
            self.logger.info("Telegram –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            self.is_running = True
            return
        await self.application.start()
        if updater:
            await updater.start_polling()
        self.is_running = True
        self.logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    async def stop(self):
        if self.consumer_task and not self.consumer_task.done():
            self.consumer_task.cancel()
            try:
                await self.consumer_task
            except asyncio.CancelledError:
                pass
            self.logger.debug("Consumer —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.consumer_task = None
        if not self.application:
            self.is_running = False
            return
        if (updater := getattr(self.application, "updater", None)) and getattr(updater, "running", False):
            await updater.stop()
        await self.application.stop()
        await self.application.shutdown()
        self.is_running = False
        self.application = None
        self.logger.info("‚úÖ Telegram –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    @staticmethod
    def _escape_markdown_v2(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2."""
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in special_chars:
            text = text.replace(char, f'\\{char}')
        return text

    def notify_system(self, message: str) -> bool:
        try:
            loop = asyncio.get_event_loop()
            task = self.send_message(f"üîß –°–ò–°–¢–ï–ú–ê: {message}")
            if loop.is_running():
                asyncio.create_task(task)
            else:
                loop.run_until_complete(task)
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False