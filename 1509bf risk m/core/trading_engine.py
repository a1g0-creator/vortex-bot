"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
–ü–µ—Ä–µ–Ω–æ—Å –ª–æ–≥–∏–∫–∏ –∏–∑ SimpleTradingBot —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import asyncio
import time
import logging
import pandas as pd
from typing import Dict, List, Optional, Any
from datetime import datetime

from exchanges.base_exchange import BaseExchange, OrderSide, OrderType
from config.config_loader import config_loader, get_vortex_config
from .indicators import VortexBandsAnalyzer, technical_indicators


class TradingEngine:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ - –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ SimpleTradingBot
    """
    
    def __init__(self, exchange: BaseExchange, mode: str = "signals"):
        self.exchange = exchange
        self.mode = mode  # "auto" –∏–ª–∏ "signals"
        self.positions = {}  # {symbol: position_data}
        self.signal_alerts = {}  # {symbol: {entry_min, entry_max, reported_entry_zone}}
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        self.last_scan_time = 0
        self.last_position_update = 0
        self.last_balance_update = 0
        
        # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
        self.initial_capital = 10000.0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.start_time = time.time()
        
        self.logger = logging.getLogger("TradingEngine")
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂—É
            if not await self.exchange.initialize():
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ä–∂—É")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            balance = await self.exchange.get_balance()
            if balance:
                self.initial_capital = balance.wallet_balance
                self.logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {self.initial_capital:.2f} USDT")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π
            await self._sync_positions()
            
            self.logger.info(f"‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ: {self.mode}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")
            return False
    
    def _calculate_position_size_4h(self, symbol: str, current_price: float) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è 4H —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
            strategies_config = config_loader.get_config("strategies")
            risk_config = strategies_config.get("risk_management", {})
            position_sizing = risk_config.get("position_sizing", {})
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            current_balance = self.initial_capital  # –£–ø—Ä–æ—â–µ–Ω–∏–µ –¥–ª—è MVP
            
            if current_balance <= 0:
                self.logger.error(f"{symbol} - –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å")
                return 0.0
            
            # –ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞
            method = position_sizing.get("method", "fixed_percent")
            
            if method == "fixed_amount":
                position_value_usdt = position_sizing.get("fixed_amount", 100.0)
            elif method == "fixed_percent":
                position_risk_percent = position_sizing.get("fixed_percent", 5.0) / 100
                position_value_usdt = current_balance * position_risk_percent
            else:
                # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–µ—Ç–æ–¥ - 5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                position_value_usdt = current_balance * 0.05
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            quantity = position_value_usdt / current_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            min_size = position_sizing.get("min_position_size", 10.0) / current_price
            max_size = position_sizing.get("max_position_size", 10000.0) / current_price
            
            quantity = max(min_size, min(quantity, max_size))
            
            self.logger.debug(
                f"{symbol} - –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞: –±–∞–ª–∞–Ω—Å={current_balance:.2f}, "
                f"—Ä–∞–∑–º–µ—Ä={position_value_usdt:.2f} USDT, quantity={quantity:.8f}"
            )
            
            return quantity
            
        except Exception as e:
            self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0
    
    def _get_total_positions(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π"""
        return len(self.positions)
    
    async def _scan_opportunities(self):
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            current_positions = self._get_total_positions()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥—É–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            symbols = await self._get_vortex_trading_symbols()
            
            if not symbols:
                self.logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                return
            
            self.logger.info(f"–°–∫–∞–Ω–∏—Ä—É–µ–º {len(symbols)} Vortex Bands –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {symbols}")
            
            signals_checked = 0
            signals_found = 0
            
            for symbol in symbols:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º 4H –¥–∞–Ω–Ω—ã–µ
                    klines = await self.exchange.get_klines(symbol, "240", limit=200)
                    if not klines or len(klines) < 50:
                        self.logger.debug(f"{symbol} - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö 4H")
                        continue
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                    df = self._klines_to_dataframe(klines)
                    
                    signals_checked += 1
                    signal = await self._check_signal(symbol, df)
                    
                    if signal:
                        signals_found += 1
                        config = signal.get('config_used', {})
                        self.logger.info(
                            f"{symbol} - VORTEX BANDS 4H –°–ò–ì–ù–ê–õ "
                            f"(L{config.get('length', 'N/A')}): {signal['reason']}"
                        )
                        
                        if self.mode == "auto":
                            success = await self._open_position(symbol, signal)
                            if success:
                                self.logger.info(f"{symbol} - –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞")
                        else:  # —Ä–µ–∂–∏–º —Å–∏–≥–Ω–∞–ª–æ–≤
                            await self._send_signal_alert(symbol, signal)
                
                except Exception as e:
                    self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ Vortex Bands 4H –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            self.logger.info(
                f"Vortex Bands 4H —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: "
                f"–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {signals_checked}, –Ω–∞–π–¥–µ–Ω–æ {signals_found} —Å–∏–≥–Ω–∞–ª–æ–≤, "
                f"–ø–æ–∑–∏—Ü–∏–π: {current_positions}"
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Vortex Bands 4H —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def _get_vortex_trading_symbols(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            strategies_config = config_loader.get_config("strategies")
            vortex_config = strategies_config.get("vortex_bands", {})
            instruments = vortex_config.get("instruments", {})
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            enabled_symbols = []
            for symbol, config in instruments.items():
                if config.get("enabled", True):
                    enabled_symbols.append(symbol)
            
            if not enabled_symbols:
                # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞
                enabled_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "AVAXUSDT"]
                self.logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
            
            self.logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ Vortex —Å–∏–º–≤–æ–ª—ã: {enabled_symbols}")
            return enabled_symbols
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return ["BTCUSDT", "ETHUSDT", "SOLUSDT", "AVAXUSDT"]
    
    def _klines_to_dataframe(self, klines: List) -> pd.DataFrame:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ DataFrame
        """
        try:
            data = []
            for kline in klines:
                data.append({
                    'timestamp': pd.to_datetime(kline.timestamp, unit='ms'),
                    'open': kline.open,
                    'high': kline.high,
                    'low': kline.low,
                    'close': kline.close,
                    'volume': kline.volume
                })
            
            df = pd.DataFrame(data)
            df = df.sort_values('timestamp').reset_index(drop=True)
            
            # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø–æ–ª–Ω—É—é —Å–≤–µ—á—É
            df = df.iloc[:-1]
            
            return df
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π –≤ DataFrame: {e}")
            return pd.DataFrame()
    
    async def _check_signal(self, symbol: str, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ Vortex Bands (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            config = get_vortex_config(symbol)
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            analyzer = VortexBandsAnalyzer(config)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signal = analyzer.analyze_signals(df, symbol)
            
            return signal
            
        except Exception as e:
            self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    async def _open_position(self, symbol: str, signal: Dict[str, Any]) -> bool:
        """
        –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = await self.exchange.get_ticker(symbol)
            if not ticker:
                self.logger.error(f"{symbol} - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä")
                return False
            
            current_price = ticker.last_price
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            quantity = self._calculate_position_size_4h(symbol, current_price)
            if quantity <= 0:
                self.logger.error(f"{symbol} - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {quantity}")
                return False
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity_str = await self._round_quantity(symbol, quantity)
            if quantity_str == "0":
                self.logger.error(f"{symbol} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ä–∞–≤–Ω–æ 0")
                return False
            
            config = signal.get('config_used', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
            if symbol in self.positions:
                existing_position = self.positions[symbol]
                existing_side = existing_position['side']
                new_side = signal["signal"]
                
                # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                if existing_side == new_side:
                    self.logger.debug(
                        f"{symbol} - –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {existing_side}"
                    )
                    return False
                
                # –†–ï–í–ï–†–° –ü–û–ó–ò–¶–ò–ò
                self.logger.info(
                    f"{symbol} - –†–ï–í–ï–†–° (L{config.get('length', 'N/A')}): "
                    f"{existing_side} -> {new_side}"
                )
                
                # –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
                await self._close_position_for_reversal(symbol)
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            side = OrderSide.BUY if signal["signal"] == "Buy" else OrderSide.SELL
            
            order_info = await self.exchange.place_order(
                symbol=symbol,
                side=side,
                order_type=OrderType.MARKET,
                quantity=float(quantity_str)
            )
            
            if order_info:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–∑–∏—Ü–∏–π
                self.positions[symbol] = {
                    'side': signal["signal"],
                    'size': float(quantity_str),
                    'entry': current_price,
                    'open_time': time.time(),
                    'strategy': 'vortex_4h',
                    'reversal_strategy': True,
                    'vortex_config': config
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await self._send_position_notification(symbol, signal, quantity_str, current_price, config)
                
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ Vortex 4H: {e}")
            return False
    
    async def _round_quantity(self, symbol: str, quantity: float) -> str:
        """
        –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –±–∏—Ä–∂–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            instrument = await self.exchange.get_instrument_info(symbol)
            if not instrument:
                self.logger.error(f"{symbol} - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ")
                return "0"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∏—Ä–∂–µ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
            return self.exchange.round_quantity(symbol, quantity)
            
        except Exception as e:
            self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            return "0"
    
    async def _close_position_for_reversal(self, symbol: str):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–≤–µ—Ä—Å–∞ (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            if symbol not in self.positions:
                return
            
            position = self.positions[symbol]
            side = position['side']
            size = position['size']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = OrderSide.SELL if side == "Buy" else OrderSide.BUY
            size_str = await self._round_quantity(symbol, size)
            
            if size_str == "0":
                self.logger.error(f"{symbol} - –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                return
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            order_info = await self.exchange.place_order(
                symbol=symbol,
                side=close_side,
                order_type=OrderType.MARKET,
                quantity=float(size_str),
                reduce_only=True
            )
            
            if order_info:
                # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                del self.positions[symbol]
                self.logger.info(f"{symbol} - –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è —Ä–µ–≤–µ—Ä—Å–∞")
            
        except Exception as e:
            self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–≤–µ—Ä—Å–∞: {e}")
    
    async def _update_all_positions(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            if not self.positions:
                return
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–∏—Ä–∂–µ–π
            await self._sync_positions()
            
            for symbol in list(self.positions.keys()):
                try:
                    ticker = await self.exchange.get_ticker(symbol)
                    if not ticker:
                        continue
                    
                    await self._update_single_position(symbol, ticker.last_price)
                    
                except Exception as e:
                    self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def _update_single_position(self, symbol: str, current_price: float):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è Vortex Bands - —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        –ù–ï–¢ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö SL/TP - —Ç–æ–ª—å–∫–æ —Ä–µ–≤–µ—Ä—Å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        """
        try:
            if symbol not in self.positions:
                return
            
            position = self.positions[symbol]
            entry_price = position['entry']
            side = position['side']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if side == "Buy":
                profit_pct = ((current_price - entry_price) / entry_price) * 100
            else:
                profit_pct = ((entry_price - current_price) / entry_price) * 100
            
            # –≠–ö–°–¢–†–ï–ù–ù–´–ô —Å—Ç–æ–ø-–ª–æ—Å—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–µ—Ä—è—Ö (-20%)
            # –≠—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–æ–≤, –Ω–µ —á–∞—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if profit_pct < -20.0:
                await self._close_position(symbol, f"EMERGENCY Stop Loss: {profit_pct:.2f}%")
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 10% –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if abs(profit_pct) > 0 and int(abs(profit_pct)) % 10 == 0:
                self.logger.info(
                    f"{symbol} - –ü–æ–∑–∏—Ü–∏—è {side}: P&L {profit_pct:+.1f}% "
                    f"(entry: {entry_price:.6f}, current: {current_price:.6f})"
                )
            
        except Exception as e:
            self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ Vortex: {e}")
    
    async def _close_position(self, symbol: str, reason: str):
        """
        –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            if symbol not in self.positions:
                return
            
            position = self.positions[symbol]
            side = position['side']
            size = position['size']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = OrderSide.SELL if side == "Buy" else OrderSide.BUY
            size_str = await self._round_quantity(symbol, size)
            
            if size_str == "0":
                self.logger.error(f"{symbol} - –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                return
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            order_info = await self.exchange.place_order(
                symbol=symbol,
                side=close_side,
                order_type=OrderType.MARKET,
                quantity=float(size_str),
                reduce_only=True
            )
            
            if order_info:
                # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                del self.positions[symbol]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                ticker = await self.exchange.get_ticker(symbol)
                profit_pct = 0
                if ticker and position['entry']:
                    current_price = ticker.last_price
                    if side == "Buy":
                        profit_pct = ((current_price - position['entry']) / position['entry']) * 100
                    else:
                        profit_pct = ((position['entry'] - current_price) / position['entry']) * 100
                
                await self._send_close_notification(symbol, reason, profit_pct)
                
                self.logger.info(f"{symbol} - –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {reason}, P&L: {profit_pct:+.1f}%")
            
        except Exception as e:
            self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    async def _sync_positions(self):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
            exchange_positions = await self.exchange.get_positions()
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏
            exchange_pos_dict = {}
            for pos in exchange_positions:
                if pos.size > 0:
                    exchange_pos_dict[pos.symbol] = pos
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ
            for symbol in list(self.positions.keys()):
                if symbol not in exchange_pos_dict:
                    self.logger.info(f"üîÑ {symbol} - –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ")
                    del self.positions[symbol]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
            for symbol, pos in exchange_pos_dict.items():
                if symbol not in self.positions:
                    self.logger.info(f"üîÑ {symbol} - –ù–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ")
                    
                    self.positions[symbol] = {
                        'side': pos.side,
                        'size': pos.size,
                        'entry': pos.entry_price,
                        'open_time': time.time(),
                        'strategy': 'vortex_4h',
                        'reversal_strategy': True
                    }
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def _send_signal_alert(self, symbol: str, signal: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            current_price = signal["entry"]
            side = signal["signal"]
            reason = signal["reason"]
            config = signal.get('config_used', {})
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            self.logger.info(
                f"üì¢ {symbol} - –°–∏–≥–Ω–∞–ª {side}: —Ü–µ–Ω–∞ {current_price:.6f}, "
                f"–∫–æ–Ω—Ñ–∏–≥ L{config.get('length', 'N/A')}, –ø—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–≥–Ω–∞–ª–µ
            self.signal_alerts[symbol] = {
                'side': side,
                'entry': current_price,
                'reason': reason,
                'config': config,
                'timestamp': time.time(),
                'strategy_type': 'reversal'
            }
            
            return True
            
        except Exception as e:
            self.logger.error(f"{symbol} - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    async def _send_position_notification(self, symbol: str, signal: Dict, quantity_str: str, 
                                        current_price: float, config: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            message = (
                f"VORTEX BANDS 4H {signal['signal'].upper()} {symbol}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_str}\n"
                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price:.6f}\n"
                f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: L={config.get('length', 'N/A')}, M={config.get('multiplier', 'N/A')}\n"
                f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –†–ï–í–ï–†–°–ò–í–ù–ê–Ø (–±–µ–∑ SL/TP)\n"
                f"–ü–æ–∑–∏—Ü–∏–π: {len(self.positions)}/10\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {signal['reason']}"
            )
            
            self.logger.info(f"üìà –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {message}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    async def _send_close_notification(self, symbol: str, reason: str, profit_pct: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            message = (
                f"‚ùå {symbol} –ó–ê–ö–†–´–¢\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"P&L: {profit_pct:+.1f}%\n"
                f"–ü–æ–∑–∏—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {len(self.positions)}/10"
            )
            
            self.logger.info(f"üìâ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {message}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
    
    async def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        """
        try:
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –≤ —Ä–µ–∂–∏–º–µ: {self.mode}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            await self._sync_positions()
            
            while True:
                try:
                    current_time = time.time()
                    
                    # 1. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                    if current_time - self.last_position_update > 120:
                        await self._update_all_positions()
                        self.last_position_update = current_time
                    
                    # 2. –ò—â–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    if current_time - self.last_scan_time > 300:
                        await self._scan_opportunities()
                        self.last_scan_time = current_time
                    
                    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    if current_time - self.last_balance_update > 300:
                        balance = await self.exchange.get_balance()
                        if balance:
                            self.logger.info(f"üîÑ –ë–∞–ª–∞–Ω—Å: {balance.wallet_balance:.2f} USDT")
                        self.last_balance_update = current_time
                    
                    await asyncio.sleep(10)  # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    await asyncio.sleep(30)
                    
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        """
        try:
            uptime = time.time() - self.start_time
            
            return {
                "mode": self.mode,
                "positions_count": len(self.positions),
                "signals_count": len(self.signal_alerts),
                "uptime_seconds": uptime,
                "exchange": str(self.exchange),
                "positions": list(self.positions.keys()),
                "last_scan_time": self.last_scan_time,
                "last_position_update": self.last_position_update
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {}
    
    async def close(self):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        """
        try:
            self.logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
            await self.exchange.close()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")