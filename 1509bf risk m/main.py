"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vortex Trading Bot v2.1
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import asyncio
import logging
import signal
import sys
import time
from typing import Optional, Dict, Any
from datetime import datetime

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from core.trading_engine import TradingEngine
from core.position_manager import PositionManager
from core.risk_manager import RiskManager
from exchanges.exchange_factory import exchange_factory, create_bybit_adapter
from config.config_loader import config_loader, get_app_config, get_bybit_credentials
from telegram_bot.telegram_bot import TelegramBot


class VortexTradingBot:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π SimpleTradingBot —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    """
    
    def __init__(self):
        self.logger = logging.getLogger("VortexTradingBot")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.exchange = None
        self.trading_engine = None
        self.position_manager = None
        self.risk_manager = None
        self.telegram_bot = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.is_running = False
        self.start_time = time.time()
        self.shutdown_requested = False
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.app_config = get_app_config()
        self.mode = "signals"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∂–∏–º —Å–∏–≥–Ω–∞–ª–æ–≤
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            self.shutdown_requested = True
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        """
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vortex Trading Bot v2.1...")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not await self._initialize_exchange():
                return False
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤
            if not await self._initialize_risk_manager():
                return False
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
            if not await self._initialize_position_manager():
                return False
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
            if not await self._initialize_trading_engine():
                return False
            
            # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            await self._initialize_telegram_bot()
            
            self.is_running = True
            self.logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            return True
            
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _initialize_exchange(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–µ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        try:
            self.logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂
            exchanges_config = config_loader.get_config("exchanges")
            enabled_exchanges = exchanges_config.get("exchanges", {}).get("enabled", ["bybit"])
        
            self.logger.info(f"üîç –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {enabled_exchanges}")
        
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bybit (–æ—Å–Ω–æ–≤–Ω–∞—è –±–∏—Ä–∂–∞)
            if "bybit" in enabled_exchanges:
                credentials = get_bybit_credentials(testnet=False)
                self.exchange = await create_bybit_adapter(
                    api_key=credentials["api_key"],
                    api_secret=credentials["api_secret"],
                    testnet=True,
                    recv_window=credentials.get("recv_window", 10000),
                    initialize=True
                )
            
                if self.exchange:
                    self.logger.info("‚úÖ Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω")
                else:
                    self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit")
                    return False
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bitget (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–∏—Ä–∂–∞)
            if "bitget" in enabled_exchanges:
                await self._test_bitget_connection()
        
            return True
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂: {e}")
            return False

    async def _test_bitget_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitget"""
        try:
            from exchanges.exchange_factory import exchange_factory
        
            # –ü–æ–ª—É—á–∞–µ–º Bitget –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            exchanges_config = config_loader.get_config("exchanges")
            bitget_config = exchanges_config.get("bitget", {})
        
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º testnet –≤–º–µ—Å—Ç–æ mainnet
            testnet_enabled = bitget_config.get("testnet", {}).get("enabled", False)
            if testnet_enabled:
                credentials = bitget_config.get("api_credentials", {}).get("testnet", {})
            else:
                credentials = bitget_config.get("api_credentials", {}).get("mainnet", {})
        
            if not all([credentials.get("api_key"), credentials.get("api_secret"), credentials.get("passphrase")]):
                self.logger.warning("‚ö†Ô∏è Bitget API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
        
            self.logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Bitget: testnet={testnet_enabled}")
        
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            bitget_adapter = exchange_factory.create_bitget(
                api_key=credentials["api_key"],
                api_secret=credentials["api_secret"],
                passphrase=credentials["passphrase"],
                testnet=testnet_enabled  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            )
        
            if bitget_adapter:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                test_result = await exchange_factory.test_connection(bitget_adapter)
                if test_result.get("overall", False):
                    self.logger.info("‚úÖ Bitget –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    self.logger.warning("‚ö†Ô∏è Bitget —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
                    self.logger.debug(f"–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞: {test_result}")
            
                await bitget_adapter.close()
            else:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Bitget –∞–¥–∞–ø—Ç–µ—Ä")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bitget: {e}")
    
    async def _initialize_risk_manager(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤"""
        try:
            self.logger.info("üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
            balance = await self.exchange.get_balance()
            initial_capital = balance.wallet_balance if balance else 10000.0
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤
            self.risk_manager = RiskManager(
                exchange=self.exchange,
                initial_capital=initial_capital
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            if not await self.risk_manager.initialize():
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤")
                return False
            
            self.logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤: {e}")
            return False
    
    async def _initialize_position_manager(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
        try:
            self.logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π...")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π
            self.position_manager = PositionManager(exchange=self.exchange)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–∏—Ä–∂–µ–π
            await self.position_manager.update_positions()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
            positions_summary = self.position_manager.get_positions_summary()
            self.logger.info(
                f"üìà –ù–∞–π–¥–µ–Ω–æ {positions_summary['total_positions']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π, "
                f"–æ–±—â–∏–π P&L: {positions_summary['total_pnl_percent']:+.2f}%"
            )
            
            self.logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False
    
    async def _initialize_trading_engine(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        try:
            self.logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            strategies_config = config_loader.get_config("strategies")
            self.mode = strategies_config.get("active_strategies", {}).get("mode", "signals")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            self.trading_engine = TradingEngine(
                exchange=self.exchange,
                mode=self.mode
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            if not await self.trading_engine.initialize():
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫")
                return False
            
            self.logger.info(f"‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ: {self.mode}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")
            return False
    
    async def _initialize_telegram_bot(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            self.logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º telegram.yaml
            telegram_config = config_loader.get_config("telegram")
            bot_config = telegram_config.get("bot", {})
        
            token = bot_config.get("token")
            chat_id = bot_config.get("chat_id")
            enabled = bot_config.get("enabled", True)
        
            if token and chat_id and enabled:
                self.logger.info(f"üì± –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram: token={token[:10]}..., chat_id={chat_id}")
            
                self.telegram_bot = TelegramBot(
                    token=token,
                    chat_id=chat_id,
                    trading_bot_instance=self
                )
            
                if await self.telegram_bot.initialize():
                    self.logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (telegram.yaml)")
                    return True
                else:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞")
                    return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
        
            # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
            elif not token or not chat_id:
                try:
                    from telegram_cfg import TELEGRAM_TOKEN, TELEGRAM_CHAT_ID
                    if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
                        self.telegram_bot = TelegramBot(
                            token=TELEGRAM_TOKEN,
                            chat_id=TELEGRAM_CHAT_ID,
                            trading_bot_instance=self
                        )
                    
                        if await self.telegram_bot.initialize():
                            self.logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (legacy config)")
                            return True
                        else:
                            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞ (legacy)")
                            return True
                    else:
                        self.logger.info("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ telegram_cfg.py")
                        return True
                except ImportError:
                    self.logger.info("‚ö†Ô∏è –§–∞–π–ª telegram_cfg.py –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ telegram.yaml –Ω–µ–ø–æ–ª–Ω—ã–π")
                    return True
            else:
                self.logger.info("‚ö†Ô∏è Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return True
                    
        except Exception as e:
            self.logger.warning(f"Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
    
    async def test_all_exchanges(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        from exchanges.exchange_factory import exchange_factory, test_all_exchanges
    
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –±–∏—Ä–∂–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        results = await test_all_exchanges()
    
        for exchange_name, result in results.items():
            status = "‚úÖ" if result.get("overall") else "‚ùå"
            self.logger.info(f"{status} {exchange_name}: {result}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.logger.info("üéØ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            if self.telegram_bot:
                await self.telegram_bot.send_startup_message()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = []
            
            # 1. –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            trading_task = asyncio.create_task(self.trading_engine.run())
            tasks.append(trading_task)
            
            # 2. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            positions_task = asyncio.create_task(self._position_update_loop())
            tasks.append(positions_task)
            
            # 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤
            risk_task = asyncio.create_task(self._risk_monitoring_loop())
            tasks.append(risk_task)
            
            # 4. Telegram –±–æ—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if self.telegram_bot:
                telegram_task = asyncio.create_task(self.telegram_bot.run())
                tasks.append(telegram_task)
            
            # 5. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_task = asyncio.create_task(self._main_monitoring_loop())
            tasks.append(monitor_task)
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            await self.shutdown()
    
    async def _position_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        while self.is_running and not self.shutdown_requested:
            try:
                await self.position_manager.update_positions()
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
                await asyncio.sleep(60)
    
    async def _risk_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
        while self.is_running and not self.shutdown_requested:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫–∏
                risk_status = await self.risk_manager.check_risks()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if risk_status.get("alerts"):
                    for alert in risk_status["alerts"]:
                        if self.telegram_bot:
                            await self.telegram_bot.send_risk_alert(
                                alert_type=alert.get("type", "warning"),
                                message_text=alert.get("message", "")
                            )
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤: {e}")
                await asyncio.sleep(120)
    
    async def _main_monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        while self.is_running and not self.shutdown_requested:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                system_status = await self.get_system_status()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                self.logger.debug(f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {system_status}")
                
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
                await asyncio.sleep(600)
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            self.logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
            
            self.is_running = False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if self.telegram_bot:
                await self.telegram_bot.send_shutdown_message()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            if self.trading_engine:
                await self.trading_engine.stop()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∏—Ä–∂–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.exchange:
                await self.exchange.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Telegram –±–æ—Ç–∞
            if self.telegram_bot:
                await self.telegram_bot.stop()
            
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status = {
                "is_running": self.is_running,
                "mode": self.mode,
                "uptime": time.time() - self.start_time,
                "timestamp": time.time()
            }
            
            # –°—Ç–∞—Ç—É—Å –±–∏—Ä–∂–∏
            if self.exchange:
                balance = await self.exchange.get_balance()
                if balance:
                    status["balance"] = {
                        "wallet_balance": balance.wallet_balance,
                        "available_balance": balance.available_balance
                    }
            
            # –°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π
            if self.position_manager:
                status["positions"] = self.position_manager.get_positions_summary()
            
            # –°—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤
            if self.risk_manager:
                status["risk_status"] = self.risk_manager.get_risk_status()
            
            return status
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e)}
    
    def set_mode(self, new_mode: str) -> bool:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
        try:
            if new_mode not in ["auto", "signals"]:
                return False
            
            old_mode = self.mode
            self.mode = new_mode
            
            if self.trading_engine:
                self.trading_engine.mode = new_mode
            
            self.logger.info(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: {old_mode} ‚Üí {new_mode}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = VortexTradingBot()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if await bot.initialize():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await bot.run()
        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return 1
            
    except KeyboardInterrupt:
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.shutdown()
    
    return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
        sys.exit(130)
