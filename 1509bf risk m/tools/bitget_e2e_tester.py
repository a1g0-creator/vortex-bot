#!/usr/bin/env python3
"""
E2E —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Bitget –∞–¥–∞–ø—Ç–µ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
"""

import os
import sys
import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from exchanges.bitget_adapter import BitgetAdapter
from exchanges.base_exchange import OrderSide, OrderType, MarginMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger("BitgetE2ETester")


class BitgetE2ETester:
    """E2E —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Bitget –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.adapter: Optional[BitgetAdapter] = None
        self.test_results = {}
        self.test_symbol = "BTCUSDT"  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.passed_tests = 0
        self.failed_tests = 0
        self.total_tests = 0
        self.critical_errors = []
        
    async def setup(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_key = os.getenv("BITGET_TESTNET_API_KEY")
            api_secret = os.getenv("BITGET_TESTNET_API_SECRET")
            api_passphrase = os.getenv("BITGET_TESTNET_API_PASSPHRASE")
            
            if not all([api_key, api_secret, api_passphrase]):
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Bitget –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
                logger.info("  export BITGET_TESTNET_API_KEY='your_key'")
                logger.info("  export BITGET_TESTNET_API_SECRET='your_secret'")
                logger.info("  export BITGET_TESTNET_API_PASSPHRASE='your_passphrase'")
                return False
            
            logger.info("=" * 80)
            logger.info("üöÄ BITGET ADAPTER E2E TESTING SUITE v2.0")
            logger.info("=" * 80)
            logger.info(f"–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            logger.info(f"–†–µ–∂–∏–º: TESTNET (demo)")
            logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–º–≤–æ–ª: {self.test_symbol}")
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
            logger.info("  ‚úì OrderInfo –º–∞–ø–ø–∏–Ω–≥ —á–µ—Ä–µ–∑ inspect")
            logger.info("  ‚úì One-way —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π")
            logger.info("  ‚úì Market reduceOnly –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏")
            logger.info("  ‚úì –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ priceEndStep")
            logger.info("-" * 80)
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
            self.adapter = BitgetAdapter(
                api_key=api_key,
                api_secret=api_secret,
                api_passphrase=api_passphrase,
                testnet=True,
                recv_window=10000
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            success = await self.adapter.initialize()
            if success:
                logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É one-way —Ä–µ–∂–∏–º–∞
                if hasattr(self.adapter, '_pos_mode_cache'):
                    logger.info(f"  Position mode cache: {self.adapter._pos_mode_cache}")
                
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ setup: {e}")
            self.critical_errors.append(f"Setup: {e}")
            return False
    
    async def run_test(self, test_name: str, test_func, *args, **kwargs) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.total_tests += 1
        try:
            logger.info(f"\nüìç –¢–µ—Å—Ç #{self.total_tests}: {test_name}")
            logger.info("  " + "-" * 50)
            
            start_time = time.time()
            result = await test_func(*args, **kwargs)
            elapsed = time.time() - start_time
            
            if result:
                logger.info(f"  ‚úÖ {test_name} - PASSED ({elapsed:.2f}s)")
                self.test_results[test_name] = {"status": "PASSED", "time": elapsed}
                self.passed_tests += 1
                return True
            else:
                logger.error(f"  ‚ùå {test_name} - FAILED ({elapsed:.2f}s)")
                self.test_results[test_name] = {"status": "FAILED", "time": elapsed}
                self.failed_tests += 1
                return False
                
        except Exception as e:
            elapsed = time.time() - start_time if 'start_time' in locals() else 0
            logger.error(f"  ‚ùå {test_name} - EXCEPTION: {e} ({elapsed:.2f}s)")
            self.test_results[test_name] = {"status": f"EXCEPTION: {e}", "time": elapsed}
            self.failed_tests += 1
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
            if test_name in ["Place Limit Order", "Get Open Orders", "Market ReduceOnly (No Position)"]:
                self.critical_errors.append(f"{test_name}: {e}")
            
            return False
    
    # ---------------------------------------------------------------------
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    # ---------------------------------------------------------------------
    
    async def test_server_time(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        server_time = await self.adapter.get_server_time()
        if server_time and server_time > 0:
            logger.info(f"    Server time: {datetime.fromtimestamp(server_time/1000)}")
            logger.info(f"    Raw timestamp: {server_time}")
            return True
        logger.error(f"    Invalid server time: {server_time}")
        return False
    
    async def test_balance(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –ø–æ–ª–µ–π"""
        balance = await self.adapter.get_balance("USDT")
        if balance:
            logger.info(f"    Wallet balance: {balance.wallet_balance:.4f} USDT")
            logger.info(f"    Available: {balance.available_balance:.4f} USDT")
            logger.info(f"    Used: {balance.used_balance:.4f} USDT")
            logger.info(f"    Unrealized PnL: {balance.unrealized_pnl:.4f} USDT")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            if balance.wallet_balance < 0:
                logger.warning("    ‚ö†Ô∏è  Negative wallet balance detected")
            
            return True
        logger.error("    Failed to get balance")
        return False
    
    async def test_instruments_cache(self) -> bool:
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–≤–æ–π–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞"""
        # –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        await self.adapter._update_symbols_cache()
        
        if not self.adapter.symbols_cache:
            logger.error("    Symbols cache is empty")
            return False
        
        logger.info(f"    Symbols cached: {len(self.adapter.symbols_cache)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è demo
        if self.adapter.testnet:
            has_market = "SBTCSUSDT" in self.adapter.symbols_cache
            has_trading = "BTCUSDT" in self.adapter.symbols_cache
            
            logger.info(f"    Has SBTCSUSDT (market): {has_market}")
            logger.info(f"    Has BTCUSDT (trading): {has_trading}")
            
            if has_market and has_trading:
                logger.info("    ‚úì Dual mapping working correctly")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤
            symbols = list(self.adapter.symbols_cache.keys())[:5]
            logger.info(f"    Sample symbols: {symbols}")
        
        return len(self.adapter.symbols_cache) > 0
    
    async def test_symbol_normalization(self) -> bool:
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        test_cases = [
            ("BTCUSDT", "SBTCSUSDT", "BTCUSDT"),
            ("SBTCSUSDT", "SBTCSUSDT", "BTCUSDT"),
            ("ETHUSDT", "SETHSUSDT", "ETHUSDT"),
            ("XRPUSDT", "SXRPSUSDT", "XRPUSDT"),
        ]
        
        all_passed = True
        for input_sym, expected_market, expected_trading in test_cases:
            market_norm = self.adapter._normalize_symbol_for_market_data(input_sym)
            trading_norm = self.adapter._normalize_symbol_for_trading(input_sym)
            
            passed = (market_norm == expected_market and trading_norm == expected_trading)
            status = "‚úì" if passed else "‚úó"
            
            logger.info(f"    {status} {input_sym}:")
            logger.info(f"      Market: {market_norm} (expected: {expected_market})")
            logger.info(f"      Trading: {trading_norm} (expected: {expected_trading})")
            
            if not passed:
                all_passed = False
        
        return all_passed
    
    async def test_instrument_info(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π price/qty step"""
        info = await self.adapter.get_instrument_info(self.test_symbol)
        if not info:
            logger.error("    Failed to get instrument info")
            return False
        
        logger.info(f"    Symbol: {info.symbol}")
        logger.info(f"    Base/Quote: {info.base_coin}/{info.quote_coin}")
        logger.info(f"    Status: {info.status}")
        logger.info(f"    Price step: {info.price_step}")
        logger.info(f"    Price precision: {info.price_precision}")
        logger.info(f"    Min qty: {info.min_order_qty}")
        logger.info(f"    Qty step: {info.qty_step}")
        logger.info(f"    Qty precision: {info.qty_precision}")
        logger.info(f"    Max leverage: {info.leverage_filter.get('max', 'N/A')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        self.instrument_info = info
        
        return True
    
    async def test_ticker(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞"""
        ticker = await self.adapter.get_ticker(self.test_symbol)
        if not ticker:
            logger.error("    Failed to get ticker")
            return False
        
        logger.info(f"    Last price: {ticker.last_price:.2f}")
        logger.info(f"    Bid: {ticker.bid_price:.2f}")
        logger.info(f"    Ask: {ticker.ask_price:.2f}")
        logger.info(f"    24h volume: {ticker.volume_24h:.2f}")
        logger.info(f"    24h change: {ticker.price_change_24h_percent:.2f}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        self.current_price = ticker.last_price
        
        return ticker.last_price > 0
    
    async def test_orderbook(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞"""
        orderbook = await self.adapter.get_orderbook(self.test_symbol, limit=5)
        if not orderbook:
            logger.error("    Failed to get orderbook")
            return False
        
        logger.info(f"    Bids: {len(orderbook['bids'])} levels")
        logger.info(f"    Asks: {len(orderbook['asks'])} levels")
        
        if orderbook['bids']:
            best_bid = orderbook['bids'][0]
            logger.info(f"    Best bid: {best_bid[0]:.2f} x {best_bid[1]:.4f}")
        
        if orderbook['asks']:
            best_ask = orderbook['asks'][0]
            logger.info(f"    Best ask: {best_ask[0]:.2f} x {best_ask[1]:.4f}")
        
        return len(orderbook['bids']) > 0 and len(orderbook['asks']) > 0
    
    async def test_klines(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π"""
        klines = await self.adapter.get_klines(self.test_symbol, interval="1H", limit=5)
        if not klines:
            logger.error("    Failed to get klines")
            return False
        
        logger.info(f"    –ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(klines)}")
        
        if klines:
            last = klines[-1]
            logger.info(f"    Last candle:")
            logger.info(f"      Time: {datetime.fromtimestamp(last.timestamp/1000)}")
            logger.info(f"      OHLC: {last.open:.2f} / {last.high:.2f} / {last.low:.2f} / {last.close:.2f}")
            logger.info(f"      Volume: {last.volume:.2f}")
        
        return len(klines) > 0
    
    async def test_funding_rate(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è funding rate —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        funding = await self.adapter.get_funding_rate(self.test_symbol)
        if funding is None:
            logger.warning("    Funding rate not available (may be normal for some symbols)")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π
        
        logger.info(f"    Funding rate: {funding:.8f}")
        logger.info(f"    Annualized: {funding * 3 * 365:.2f}%")
        
        return True
    
    async def test_set_leverage(self) -> bool:
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞"""
        target_leverage = 10
        success = await self.adapter.set_leverage(self.test_symbol, target_leverage)
        
        if success:
            logger.info(f"    ‚úì Leverage set to {target_leverage}x")
        else:
            logger.warning(f"    Failed to set leverage (may already be set)")
        
        return success
    
    async def test_set_margin_mode(self) -> bool:
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –º–∞—Ä–∂–∏"""
        success = await self.adapter.set_margin_mode(self.test_symbol, MarginMode.CROSS)
        
        if success:
            logger.info(f"    ‚úì Margin mode set to CROSS")
        else:
            logger.warning(f"    Failed to set margin mode (may already be CROSS)")
        
        return success
    
    async def test_round_functions(self) -> bool:
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        if not hasattr(self, 'instrument_info'):
            info = await self.adapter.get_instrument_info(self.test_symbol)
            if not info:
                logger.error("    Cannot test rounding without instrument info")
                return False
            self.instrument_info = info
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        test_price = 89876.123456
        test_qty = 0.0012345
        
        rounded_price = self.adapter.round_price(self.test_symbol, test_price)
        rounded_qty = self.adapter.round_quantity(self.test_symbol, test_qty)
        
        logger.info(f"    Price rounding:")
        logger.info(f"      Input: {test_price}")
        logger.info(f"      Output: {rounded_price}")
        logger.info(f"      Step: {self.instrument_info.price_step}")
        
        logger.info(f"    Quantity rounding:")
        logger.info(f"      Input: {test_qty}")
        logger.info(f"      Output: {rounded_qty}")
        logger.info(f"      Min: {self.instrument_info.min_order_qty}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        price_decimal = Decimal(rounded_price)
        step_decimal = Decimal(str(self.instrument_info.price_step))
        
        if step_decimal > 0:
            remainder = price_decimal % step_decimal
            if remainder != 0:
                logger.error(f"    Price not aligned to step: remainder={remainder}")
                return False
        
        return True
    
    async def test_place_limit_order(self) -> bool:
        """–¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π OrderInfo –º–∞–ø–ø–∏–Ω–≥–∞"""
        if not hasattr(self, 'current_price'):
            ticker = await self.adapter.get_ticker(self.test_symbol)
            if not ticker:
                logger.error("    Cannot place order without current price")
                return False
            self.current_price = ticker.last_price
        
        # –¶–µ–Ω–∞ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞ –Ω–∞ 10%
        limit_price = self.current_price * 0.9
        limit_price_str = self.adapter.round_price(self.test_symbol, limit_price)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        quantity = 0.001
        quantity_str = self.adapter.round_quantity(self.test_symbol, quantity)
        
        logger.info(f"    Placing limit order:")
        logger.info(f"      Symbol: {self.test_symbol}")
        logger.info(f"      Side: BUY")
        logger.info(f"      Quantity: {quantity_str}")
        logger.info(f"      Price: {limit_price_str}")
        
        order = await self.adapter.place_order(
            symbol=self.test_symbol,
            side=OrderSide.BUY,
            order_type=OrderType.LIMIT,
            quantity=float(quantity_str),
            price=float(limit_price_str),
            time_in_force="GTC",
            client_order_id=f"test_{int(time.time() * 1000)}"
        )
        
        if not order:
            logger.error("    Failed to place order")
            return False
        
        logger.info(f"    ‚úì Order placed successfully:")
        logger.info(f"      Order ID: {order.order_id}")
        logger.info(f"      Status: {order.status}")
        logger.info(f"      Symbol: {order.symbol}")
        logger.info(f"      Side: {order.side}")
        logger.info(f"      Type: {order.order_type}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–º–µ–Ω—ã
        self.test_order_id = order.order_id
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π
        await asyncio.sleep(1)
        
        # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
        cancelled = await self.adapter.cancel_order(self.test_symbol, order.order_id)
        if cancelled:
            logger.info(f"    ‚úì Order cancelled successfully")
        else:
            logger.warning(f"    Failed to cancel order (may already be filled)")
        
        return True
    
    async def test_get_open_orders(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π OrderInfo –º–∞–ø–ø–∏–Ω–≥–∞"""
        orders = await self.adapter.get_open_orders(self.test_symbol)
        
        logger.info(f"    Open orders: {len(orders)}")
        
        for i, order in enumerate(orders[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            logger.info(f"    Order #{i+1}:")
            logger.info(f"      ID: {order.order_id}")
            logger.info(f"      {order.side} {order.quantity} @ {order.price}")
            logger.info(f"      Status: {order.status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞–ø–ø–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if not order.order_id:
                logger.error(f"      ‚ö†Ô∏è  Missing order_id!")
                return False
        
        return True  # –£—Å–ø–µ—à–Ω–æ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    
    async def test_market_reduce_only_no_position(self) -> bool:
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç: market reduceOnly –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å no-op"""
        logger.info(f"    Testing market reduceOnly without position...")
        logger.info(f"    This should NOT throw an exception")
        
        order = await self.adapter.place_order(
            symbol=self.test_symbol,
            side=OrderSide.SELL,
            order_type=OrderType.MARKET,
            quantity=0.001,
            reduce_only=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if order is None:
            logger.info(f"    ‚úì Correctly returned None (no-op)")
            return True
        elif hasattr(order, 'status') and order.status == "NoPosition":
            logger.info(f"    ‚úì Correctly returned NoPosition status")
            logger.info(f"      Order ID: {order.order_id}")
            return True
        elif hasattr(order, 'quantity') and order.quantity == 0:
            logger.info(f"    ‚úì Correctly returned zero quantity order")
            return True
        else:
            logger.error(f"    ‚ùå Unexpected result:")
            logger.error(f"      Type: {type(order)}")
            logger.error(f"      Value: {order}")
            if hasattr(order, '__dict__'):
                logger.error(f"      Attributes: {order.__dict__}")
            return False
    
    async def test_positions(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        positions = await self.adapter.get_positions()
        
        logger.info(f"    Total positions: {len(positions)}")
        
        for i, pos in enumerate(positions):
            logger.info(f"    Position #{i+1}:")
            logger.info(f"      Symbol: {pos.symbol}")
            logger.info(f"      Side: {pos.side}")
            logger.info(f"      Size: {pos.size}")
            logger.info(f"      Entry: {pos.entry_price:.2f}")
            logger.info(f"      Mark: {pos.mark_price:.2f}")
            logger.info(f"      PnL: {pos.pnl:.2f} ({pos.pnl_percentage:.2f}%)")
            logger.info(f"      Leverage: {pos.leverage}x")
        
        return True  # –£—Å–ø–µ—à–Ω–æ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π
    
    async def test_position_mode(self) -> bool:
        """–¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–π (one-way vs hedge)"""
        logger.info("    Checking position mode configuration...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ä–µ–∂–∏–º–∞
        if hasattr(self.adapter, '_pos_mode_cache'):
            logger.info(f"    Position mode cache: {self.adapter._pos_mode_cache}")
        
        # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å one-way —Ä–µ–∂–∏–º
        success = await self.adapter._ensure_position_mode("one_way")
        
        if success:
            logger.info("    ‚úì One-way mode confirmed")
        else:
            logger.warning("    Could not confirm position mode")
        
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    
    # ---------------------------------------------------------------------
    # –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    # ---------------------------------------------------------------------
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not await self.setup():
                logger.error("‚ùå Setup failed, cannot continue")
                return
            
            logger.info("\n" + "=" * 80)
            logger.info("üìã –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            logger.info("=" * 80)
            
            # –ì—Ä—É–ø–ø–∞ 1: –ë–∞–∑–æ–≤–∞—è —Å–≤—è–∑—å –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            logger.info("\nüîπ –ì–†–£–ü–ü–ê 1: –ë–∞–∑–æ–≤–∞—è —Å–≤—è–∑—å –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            logger.info("-" * 60)
            await self.run_test("Server Time", self.test_server_time)
            await self.run_test("Balance", self.test_balance)
            
            # –ì—Ä—É–ø–ø–∞ 2: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤
            logger.info("\nüîπ –ì–†–£–ü–ü–ê 2: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info("-" * 60)
            await self.run_test("Instruments Cache", self.test_instruments_cache)
            await self.run_test("Symbol Normalization", self.test_symbol_normalization)
            await self.run_test("Instrument Info", self.test_instrument_info)
            
            # –ì—Ä—É–ø–ø–∞ 3: –ú–∞—Ä–∫–µ—Ç-–¥–∞–Ω–Ω—ã–µ
            logger.info("\nüîπ –ì–†–£–ü–ü–ê 3: –ú–∞—Ä–∫–µ—Ç-–¥–∞–Ω–Ω—ã–µ")
            logger.info("-" * 60)
            await self.run_test("Ticker", self.test_ticker)
            await self.run_test("Orderbook", self.test_orderbook)
            await self.run_test("Klines", self.test_klines)
            await self.run_test("Funding Rate", self.test_funding_rate)
            
            # –ì—Ä—É–ø–ø–∞ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
            logger.info("\nüîπ –ì–†–£–ü–ü–ê 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")
            logger.info("-" * 60)
            await self.run_test("Position Mode", self.test_position_mode)
            await self.run_test("Set Leverage", self.test_set_leverage)
            await self.run_test("Set Margin Mode", self.test_set_margin_mode)
            await self.run_test("Round Functions", self.test_round_functions)
            
            # –ì—Ä—É–ø–ø–∞ 5: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï —Ç–µ—Å—Ç—ã –æ—Ä–¥–µ—Ä–æ–≤
            logger.info("\nüîπ –ì–†–£–ü–ü–ê 5: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï —Ç–µ—Å—Ç—ã –æ—Ä–¥–µ—Ä–æ–≤")
            logger.info("-" * 60)
            await self.run_test("Place Limit Order", self.test_place_limit_order)
            await self.run_test("Get Open Orders", self.test_get_open_orders)
            await self.run_test("Market ReduceOnly (No Position)", self.test_market_reduce_only_no_position)
            
            # –ì—Ä—É–ø–ø–∞ 6: –ü–æ–∑–∏—Ü–∏–∏
            logger.info("\nüîπ –ì–†–£–ü–ü–ê 6: –ü–æ–∑–∏—Ü–∏–∏")
            logger.info("-" * 60)
            await self.run_test("Positions", self.test_positions)
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            await self.generate_report()
            
        except Exception as e:
            logger.error(f"‚ùå Fatal error in test suite: {e}")
            self.critical_errors.append(f"Fatal: {e}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            if self.adapter:
                await self.adapter.close()
                logger.info("\n‚úì Adapter closed")
    
    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\n" + "=" * 80)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (self.passed_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        total_time = sum(r.get("time", 0) for r in self.test_results.values())
        
        logger.info(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        logger.info(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests}")
        logger.info(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed_tests}")
        logger.info(f"  üìä Success Rate: {success_rate:.1f}%")
        logger.info(f"  ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if self.critical_errors:
            logger.error(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ({len(self.critical_errors)}):")
            for error in self.critical_errors:
                logger.error(f"  ‚Ä¢ {error}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
        logger.info("\nüìù –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        
        groups = {
            "–ë–∞–∑–æ–≤—ã–µ": ["Server Time", "Balance"],
            "–°–∏–º–≤–æ–ª—ã": ["Instruments Cache", "Symbol Normalization", "Instrument Info"],
            "–ú–∞—Ä–∫–µ—Ç": ["Ticker", "Orderbook", "Klines", "Funding Rate"],
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": ["Position Mode", "Set Leverage", "Set Margin Mode", "Round Functions"],
            "–û—Ä–¥–µ—Ä–∞": ["Place Limit Order", "Get Open Orders", "Market ReduceOnly (No Position)"],
            "–ü–æ–∑–∏—Ü–∏–∏": ["Positions"]
        }
        
        for group_name, tests in groups.items():
            logger.info(f"\n  {group_name}:")
            for test_name in tests:
                if test_name in self.test_results:
                    result = self.test_results[test_name]
                    status = result["status"]
                    time_str = f"{result['time']:.2f}s"
                    emoji = "‚úÖ" if status == "PASSED" else "‚ùå"
                    logger.info(f"    {emoji} {test_name}: {status} ({time_str})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        logger.info("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        
        fixes = {
            "OrderInfo –º–∞–ø–ø–∏–Ω–≥": "Place Limit Order" in self.test_results and 
                                 self.test_results["Place Limit Order"]["status"] == "PASSED",
            "One-way —Ä–µ–∂–∏–º": "Position Mode" in self.test_results,
            "Market reduceOnly no-op": "Market ReduceOnly (No Position)" in self.test_results and
                                       self.test_results["Market ReduceOnly (No Position)"]["status"] == "PASSED",
            "–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω": "Round Functions" in self.test_results and
                             self.test_results["Round Functions"]["status"] == "PASSED"
        }
        
        for fix_name, is_fixed in fixes.items():
            status = "‚úÖ FIXED" if is_fixed else "‚ùå NOT FIXED"
            logger.info(f"  {status}: {fix_name}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        logger.info("\n" + "=" * 80)
        
        if self.failed_tests == 0:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ")
            logger.info("–ê–¥–∞–ø—Ç–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
        elif len(self.critical_errors) > 0:
            logger.error("‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
            logger.error("–ê–¥–∞–ø—Ç–µ—Ä –ù–ï –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
            logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.")
        elif success_rate >= 80:
            logger.warning("‚ö†Ô∏è  –ï–°–¢–¨ –ù–ï–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò")
            logger.warning(f"Success rate: {success_rate:.1f}%")
            logger.warning("–ê–¥–∞–ø—Ç–µ—Ä —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
        else:
            logger.error("‚ùå –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò")
            logger.error(f"Success rate: {success_rate:.1f}%")
            logger.error("–ê–¥–∞–ø—Ç–µ—Ä —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
        
        logger.info("=" * 80)


# ---------------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ---------------------------------------------------------------------

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = BitgetE2ETester()
    await tester.run_all_tests()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(main())
