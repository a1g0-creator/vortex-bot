#!/usr/bin/env python3
"""
E2E —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Bybit –¥–µ–º–æ/–º—ç–π–Ω–Ω–µ—Ç–∞ - ENHANCED –≤–µ—Ä—Å–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
- –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏–∑ –∫–æ—Ä–Ω—è (../)
- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –∏–∑ exchanges.bybit_adapter
- –î–æ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ù–ï—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
- –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket
"""

import asyncio
import logging
import sys
import inspect
from pathlib import Path
from typing import Dict, Any, Optional

# >>> –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (‚Ä¶/Vortex_trading_bot)
PROJECT_ROOT = Path(__file__).resolve().parents[1]
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç—Ä–æ–≥–æ –∏–∑ –ø–∞–ø–∫–∏ exchanges, –∫–∞–∫ —É —Ç–µ–±—è –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö
from exchanges.bybit_adapter import BybitAdapter      # <-- –í–ê–ñ–ù–û
from config.config_loader import config_loader, get_bybit_active_config

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
log = logging.getLogger("BybitE2E")

class BybitDemoE2ETester:
    def __init__(self):
        self.adapter: Optional[BybitAdapter] = None
        self.test_symbol = "BTCUSDT"
        self.results: Dict[str, Dict[str, bool]] = {}

    def _check_abstract_methods(self) -> bool:
        """–ü–µ—á–∞—Ç–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —É BybitAdapter"""
        missing = getattr(BybitAdapter, "__abstractmethods__", set())
        if missing:
            log.error("‚ùå BybitAdapter —Å–µ–π—á–∞—Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π. –ù–ï —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –º–µ—Ç–æ–¥—ã:")
            for m in sorted(missing):
                log.error("   - %s", m)
            log.error("   ‚Üí –î–æ–ø–∏—à–∏ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –≤ exchanges/bybit_adapter.py (—Å–º. —á–µ–∫-–ª–∏—Å—Ç –Ω–∏–∂–µ)")
            return False
        log.info("‚úÖ BybitAdapter –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –∫–ª–∞—Å—Å–æ–º (OK)")
        return True

    async def setup(self) -> bool:
        log.info("=" * 60)
        log.info("üöÄ Starting Bybit E2E Test")
        log.info("=" * 60)

        # 1) –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ—Å—Ç—å
        if not self._check_abstract_methods():
            return False

        # 2) –ö–æ–Ω—Ñ–∏–≥
        active_env = config_loader.get_active_environment("bybit")
        log.info("Active environment: %r", active_env)

        cfg = get_bybit_active_config()
        if not cfg:
            log.error("‚ùå Failed to get Bybit configuration")
            return False

        required = ["environment", "base_url", "ws_public", "ws_private", "api_key", "api_secret"]
        missing_fields = [k for k in required if not cfg.get(k)]
        if missing_fields:
            log.error("‚ùå Missing config fields: %s", missing_fields)
            return False

        log.info("Configuration:")
        log.info("  environment: %s", cfg["environment"])
        log.info("  base_url   : %s", cfg["base_url"])
        log.info("  ws_public  : %s", cfg["ws_public"])
        log.info("  ws_private : %s", cfg["ws_private"])
        log.info("  api_key    : %s...", cfg["api_key"][:8])

        # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: –ø–æ–¥–¥–µ—Ä–∂–∏–º 2 —Å–∏–≥–Ω–∞—Ç—É—Ä—ã)
        #    –∞) BybitAdapter(cfg_dict)
        #    –±) BybitAdapter(api_key, api_secret, testnet=bool)
        init_ok = False
        try:
            sig = inspect.signature(BybitAdapter)
            if len(sig.parameters) == 1:
                self.adapter = BybitAdapter(cfg)  # type: ignore
            else:
                self.adapter = BybitAdapter(cfg["api_key"], cfg["api_secret"],
                                            testnet=(cfg["environment"] == "demo"))  # type: ignore
            log.info("Initializing adapter...")
            if hasattr(self.adapter, "initialize") and inspect.iscoroutinefunction(self.adapter.initialize):
                init_ok = await self.adapter.initialize()
            else:
                init_ok = True
        except Exception as e:
            log.exception("‚ùå Adapter init error: %s", e)
            return False

        if not init_ok:
            log.error("‚ùå Adapter.initialize() returned False")
            return False

        log.info("‚úÖ Adapter initialized")
        return True

    async def test_rest(self) -> Dict[str, bool]:
        res = {"server_time": False, "balance": False, "instruments": False, "ticker": False, "positions": False}
        log.info("\n" + "=" * 60)
        log.info("üì° Testing REST API")
        log.info("=" * 60)

        try:
            t = await self.adapter.get_server_time()  # type: ignore
            res["server_time"] = bool(t)
            log.info("Server time: %s", t)
        except Exception as e:
            log.error("Server time error: %s", e)

        try:
            b = await self.adapter.get_balance()  # type: ignore
            res["balance"] = bool(b)
            if b:
                log.info("Balance: %.2f USDT (available: %.2f)", b.wallet_balance, b.available_balance)
        except Exception as e:
            log.error("Balance error: %s", e)

        try:
            instruments = await self.adapter.get_all_instruments()  # type: ignore
            res["instruments"] = bool(instruments)
            if instruments:
                log.info("Loaded %d instruments", len(instruments))
        except Exception as e:
            log.error("Instruments error: %s", e)

        try:
            tk = await self.adapter.get_ticker(self.test_symbol)  # type: ignore
            res["ticker"] = bool(tk)
            if tk:
                log.info("Ticker %s: bid=%.2f ask=%.2f last=%.2f", self.test_symbol, tk.bid, tk.ask, tk.last)
        except Exception as e:
            log.error("Ticker error: %s", e)

        # ENHANCED: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π
        try:
            log.info("üîç ENHANCED: Testing positions with detailed diagnostics...")
            pos = await self.adapter.get_positions()  # type: ignore
            res["positions"] = True
            if pos:
                log.info("Open positions: %d", len(pos))
                for i, p in enumerate(pos[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–∑–∏—Ü–∏–∏
                    log.info(f"  Position {i+1}: {p.symbol} {p.side} {p.size}")
            else:
                log.info("No open positions (empty list returned)")
        except Exception as e:
            log.error("‚ùå ENHANCED: Positions error details:")
            log.error(f"   Exception type: {type(e).__name__}")
            log.error(f"   Exception message: {str(e)}")
            log.error(f"   Full traceback:", exc_info=True)
            
            # –ü—Ä–æ–±—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –∑–∞–ø—Ä–æ—Å
            try:
                log.info("üîß ENHANCED: Attempting diagnostic API calls...")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö endpoints
                server_time = await self.adapter.get_server_time()
                log.info(f"   Server time accessible: {bool(server_time)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º session
                session_status = "Unknown"
                if hasattr(self.adapter, 'session'):
                    if self.adapter.session is None:
                        session_status = "None"
                    elif self.adapter.session.closed:
                        session_status = "Closed"
                    else:
                        session_status = "Open"
                log.info(f"   HTTP session status: {session_status}")
                
            except Exception as diag_e:
                log.error(f"   Diagnostic call failed: {diag_e}")

        return res

    async def test_ws(self) -> Dict[str, bool]:
        res = {"ws_public_connect": False, "ws_public_subscribe": False, "ws_private_connect": False, "ws_private_auth": False}
        log.info("\n" + "=" * 60)
        log.info("üîå Testing WebSocket")
        log.info("=" * 60)

        try:
            tick_event = asyncio.Event()

            async def on_tick(data):
                log.info("Received ticker update: %s", data)
                tick_event.set()

            # ENHANCED: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞ WebSocket
            log.info("üîç ENHANCED: Pre-WebSocket diagnostics...")
            log.info(f"   Adapter has start_websocket: {hasattr(self.adapter, 'start_websocket')}")
            log.info(f"   Adapter has stop_websocket: {hasattr(self.adapter, 'stop_websocket')}")
            log.info(f"   Adapter has subscribe_ticker: {hasattr(self.adapter, 'subscribe_ticker')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            initial_ws_public = getattr(self.adapter, "_ws_public", "NOT_FOUND")
            initial_ws_private = getattr(self.adapter, "_ws_private", "NOT_FOUND")
            initial_ws_auth = getattr(self.adapter, "_ws_auth", "NOT_FOUND")
            initial_ws_running = getattr(self.adapter, "_ws_running", "NOT_FOUND")
            
            log.info(f"   Initial _ws_public: {initial_ws_public}")
            log.info(f"   Initial _ws_private: {initial_ws_private}")  
            log.info(f"   Initial _ws_auth: {initial_ws_auth}")
            log.info(f"   Initial _ws_running: {initial_ws_running}")

            log.info("üöÄ ENHANCED: Starting WebSocket with detailed monitoring...")
            start_result = await self.adapter.start_websocket()  # type: ignore
            log.info(f"   start_websocket() returned: {start_result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            post_ws_public = getattr(self.adapter, "_ws_public", "NOT_FOUND")
            post_ws_private = getattr(self.adapter, "_ws_private", "NOT_FOUND")
            post_ws_auth = getattr(self.adapter, "_ws_auth", "NOT_FOUND")
            post_ws_running = getattr(self.adapter, "_ws_running", "NOT_FOUND")
            
            log.info(f"   After start _ws_public: {post_ws_public}")
            log.info(f"   After start _ws_private: {post_ws_private}")
            log.info(f"   After start _ws_auth: {post_ws_auth}")
            log.info(f"   After start _ws_running: {post_ws_running}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            if post_ws_public != "NOT_FOUND" and post_ws_public is not None:
                log.info(f"   _ws_public type: {type(post_ws_public)}")
                log.info(f"   _ws_public closed: {getattr(post_ws_public, 'closed', 'N/A')}")
            
            if post_ws_private != "NOT_FOUND" and post_ws_private is not None:
                log.info(f"   _ws_private type: {type(post_ws_private)}")
                log.info(f"   _ws_private closed: {getattr(post_ws_private, 'closed', 'N/A')}")

            res["ws_public_connect"] = True
            await asyncio.sleep(1)
            
            log.info("üéØ ENHANCED: Testing ticker subscription...")
            await self.adapter.subscribe_ticker(self.test_symbol, on_tick)  # type: ignore
            res["ws_public_subscribe"] = True

            try:
                await asyncio.wait_for(tick_event.wait(), timeout=10)
            except asyncio.TimeoutError:
                log.warning("No ticker in 10s (ok on quiet markets)")

            # ENHANCED: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ private WebSocket
            log.info("üîç ENHANCED: Checking private WebSocket status...")
            
            ws_private_obj = getattr(self.adapter, "_ws_private", None)
            ws_auth_status = getattr(self.adapter, "_ws_auth", False)
            
            log.info(f"   _ws_private object: {ws_private_obj}")
            log.info(f"   _ws_private is None: {ws_private_obj is None}")
            log.info(f"   _ws_auth status: {ws_auth_status}")
            log.info(f"   _ws_auth type: {type(ws_auth_status)}")
            
            if ws_private_obj is not None:
                res["ws_private_connect"] = True
                log.info("‚úÖ ENHANCED: Private WebSocket connection detected")
                
                if ws_auth_status:
                    res["ws_private_auth"] = True
                    log.info("‚úÖ ENHANCED: Private WebSocket authentication confirmed")
                else:
                    log.error("‚ùå ENHANCED: Private WebSocket connected but not authenticated")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    try:
                        if hasattr(ws_private_obj, 'closed'):
                            log.info(f"   WS private closed status: {ws_private_obj.closed}")
                        if hasattr(self.adapter, '_ws_private_task'):
                            task = self.adapter._ws_private_task
                            if task:
                                log.info(f"   Private task done: {task.done()}")
                                log.info(f"   Private task cancelled: {task.cancelled()}")
                                if task.done() and task.exception():
                                    log.error(f"   Private task exception: {task.exception()}")
                    except Exception as task_e:
                        log.error(f"   Task inspection error: {task_e}")
            else:
                log.error("‚ùå ENHANCED: Private WebSocket connection NOT established")
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏—á–∏–Ω
                try:
                    if hasattr(self.adapter, '_ws_private_task'):
                        task = self.adapter._ws_private_task
                        if task is None:
                            log.error("   Private task was never created")
                        else:
                            log.info(f"   Private task exists: {task}")
                            log.info(f"   Private task done: {task.done()}")
                            log.info(f"   Private task cancelled: {task.cancelled()}")
                            if task.done() and task.exception():
                                log.error(f"   Private task exception: {task.exception()}")
                except Exception as diag_e:
                    log.error(f"   Private task diagnostic error: {diag_e}")

        except Exception as e:
            log.error("‚ùå ENHANCED: WebSocket error details:")
            log.error(f"   Exception type: {type(e).__name__}")
            log.error(f"   Exception message: {str(e)}")
            log.error(f"   Full traceback:", exc_info=True)
        finally:
            try:
                log.info("üßπ ENHANCED: Cleaning up WebSocket...")
                await self.adapter.stop_websocket()  # type: ignore
                log.info("‚úÖ ENHANCED: WebSocket cleanup completed")
            except Exception as cleanup_e:
                log.error(f"‚ùå ENHANCED: WebSocket cleanup error: {cleanup_e}")
        return res

    async def run(self) -> bool:
        if not await self.setup():
            return False
        
        try:
            self.results["rest"] = await self.test_rest()
            self.results["ws"] = await self.test_ws()

            log.info("\n" + "=" * 60)
            log.info("üìä TEST SUMMARY")
            log.info("=" * 60)
            total = 0
            passed = 0
            for cat, rr in self.results.items():
                log.info("[%s]", cat.upper())
                for name, ok in rr.items():
                    total += 1
                    passed += int(bool(ok))
                    log.info("  %s %s", "‚úÖ" if ok else "‚ùå", name)

            ok_ratio = (passed / total * 100) if total else 0.0
            if ok_ratio >= 80:
                log.info("‚úÖ E2E PASSED (%d/%d = %.1f%%)", passed, total, ok_ratio)
                return True
            else:
                log.error("‚ùå E2E FAILED (%d/%d = %.1f%%)", passed, total, ok_ratio)
                return False
        finally:
            # ENHANCED: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∞–¥–∞–ø—Ç–µ—Ä–∞
            await self._enhanced_cleanup()
    
    async def _enhanced_cleanup(self):
        """ENHANCED: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            if self.adapter:
                log.info("üßπ ENHANCED: Starting comprehensive adapter cleanup...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
                try:
                    if hasattr(self.adapter, 'stop_websocket'):
                        log.info("   Stopping WebSocket connections...")
                        await self.adapter.stop_websocket()
                        log.info("   ‚úÖ WebSocket stopped")
                except Exception as e:
                    log.warning(f"   ‚ö†Ô∏è WebSocket stop error: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
                try:
                    if hasattr(self.adapter, 'close'):
                        log.info("   Closing adapter...")
                        await self.adapter.close()
                        log.info("   ‚úÖ Adapter closed")
                except Exception as e:
                    log.warning(f"   ‚ö†Ô∏è Adapter close error: {e}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
                try:
                    if hasattr(self.adapter, 'session') and self.adapter.session:
                        session = self.adapter.session
                        log.info(f"   Session status: closed={session.closed}")
                        if not session.closed:
                            log.info("   Force closing session...")
                            await session.close()
                            await asyncio.sleep(0.3)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                            log.info(f"   Session after force close: closed={session.closed}")
                        log.info("   ‚úÖ Session cleanup completed")
                except Exception as e:
                    log.warning(f"   ‚ö†Ô∏è Session cleanup error: {e}")
                
                log.info("‚úÖ ENHANCED: Adapter cleanup completed")
        except Exception as e:
            log.error(f"‚ùå ENHANCED: Cleanup error: {e}")

async def _main():
    tester = BybitDemoE2ETester()
    success = await tester.run()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    asyncio.run(_main())
