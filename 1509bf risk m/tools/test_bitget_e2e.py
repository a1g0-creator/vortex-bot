#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–ª–Ω—ã–π e2e —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è BitgetAdapter (demo/mainnet).
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: init, server time, balances, instruments,
ticker/klines/orderbook/funding, leverage/margin, order lifecycle (limit/market),
SL/TP, positions, rounding –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤.
"""

import os
import sys
import time
import json
import math
import asyncio
import logging
from datetime import datetime

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
LOG_LEVEL = os.getenv("VTX_TEST_LOG", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
log = logging.getLogger("BitgetE2E")

# --- –∏–º–ø–æ—Ä—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ ---
# –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–∞: vortex_trading_bot/exchanges/bitget_adapter.py
# –ª–∏–±–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –ª–µ–∂–∏—Ç –≤ tools/
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if BASE_DIR not in sys.path:
    sys.path.append(BASE_DIR)

try:
    from exchanges.bitget_adapter import BitgetAdapter, create_bitget_adapter, get_bitget_credentials
except Exception as e:
    log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å BitgetAdapter: %s", e)
    sys.exit(1)


class SoftAssert:
    def __init__(self):
        self.passes = 0
        self.fails = 0
        self.details = []

    def ok(self, cond, msg_ok, msg_fail):
        if cond:
            self.passes += 1
            log.info("‚úÖ %s", msg_ok)
            self.details.append(("PASS", msg_ok))
            return True
        else:
            self.fails += 1
            log.error("‚ùå %s", msg_fail)
            self.details.append(("FAIL", msg_fail))
            return False

    def summary(self, title="–ò–¢–û–ì–ò"):
        log.info("\n" + "="*60)
        log.info("üìä %s", title)
        log.info("="*60)
        for status, line in self.details:
            prefix = "‚úÖ" if status == "PASS" else "‚ùå"
            log.info("%s %s", prefix, line)
        log.info("-"*60)
        log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç: %d / %d –ø—Ä–æ–π–¥–µ–Ω–æ",
                 self.passes, self.passes + self.fails)
        return self.fails == 0


class BitgetAdapterE2E:
    def __init__(self, testnet=True):
        self.testnet = testnet
        self.sa = SoftAssert()
        self.adapter: BitgetAdapter | None = None

        # –ë–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.trade_sym = "BTCUSDT"              # –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        self.market_sym = "SBTCSUSDT" if testnet else "BTCUSDT"  # –º–∞—Ä–∫–µ—Ç demo/main

    async def _ensure_adapter(self):
        creds = get_bitget_credentials(self.testnet)
        missing = [k for k, v in creds.items() if not v and k != "recv_window"]
        self.sa.ok(
            not missing,
            "–£—á—ë—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
            f"–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è demo/mainnet: {missing}"
        )
        if missing:
            raise RuntimeError("–ù–µ—Ç API –∫–ª—é—á–µ–π –¥–ª—è Bitget")

        self.adapter = await create_bitget_adapter(
            api_key=creds["api_key"],
            api_secret=creds["api_secret"],
            api_passphrase=creds["api_passphrase"],
            testnet=self.testnet,
            recv_window=int(creds.get("recv_window", 10000)),
            initialize=True
        )
        self.sa.ok(self.adapter is not None, "–ê–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–µ—Ä")

    async def test_server_time(self):
        ts = await self.adapter.get_server_time()
        ok = isinstance(ts, int) and ts > 0
        if ok:
            dt = datetime.fromtimestamp(ts/1000)
            log.info("–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: %s", dt.strftime("%Y-%m-%d %H:%M:%S"))
        self.sa.ok(ok, "ServerTime –ø–æ–ª—É—á–µ–Ω", "ServerTime –Ω–µ –ø–æ–ª—É—á–µ–Ω")

    async def test_balance(self):
        bal = await self.adapter.get_balance("USDT")
        ok = bal is not None
        if ok:
            log.info("–ë–∞–ª–∞–Ω—Å USDT: –¥–æ—Å—Ç—É–ø–Ω–æ=%.4f, –≤—Å–µ–≥–æ=%.4f, used=%.4f, upl=%.4f",
                     bal.available_balance, bal.wallet_balance, bal.used_balance, bal.unrealized_pnl)
        self.sa.ok(ok, "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω", "–ë–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")

    async def test_instruments(self):
        instruments = await self.adapter.get_all_instruments()
        ok = isinstance(instruments, list) and len(instruments) >= 1
        self.sa.ok(ok, f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(instruments) if instruments else 0}",
                   "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        if ok:
            # –Ω–∞–π–¥—ë–º –Ω–∞—à —Ä—ã–Ω–æ–∫ –≤ –ª—é–±–æ–º –∏–∑ –∫–ª—é—á–µ–π
            names = {i.symbol for i in instruments}
            has_demo_btc = ("SBTCSUSDT" in names) if self.testnet else True
            self.sa.ok(has_demo_btc, "–°–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç SBTCSUSDT –≤ demo", "–ù–µ—Ç SBTCSUSDT –≤ demo —Å–ø–∏—Å–∫–µ")

    async def test_symbol_normalization(self):
        # –ú–∞—Ä–∫–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ demo -> SBTCSUSDT
        ms = self.adapter._normalize_symbol_for_market_data("BTCUSDT")
        self.sa.ok(
            ms == ( "SBTCSUSDT" if self.testnet else "BTCUSDT"),
            f"normalize market OK: BTCUSDT -> {ms}",
            f"normalize market FAIL: –æ–∂–∏–¥–∞–ª–æ—Å—å SBTCSUSDT, –ø–æ–ª—É—á–∏–ª–∏ {ms}"
        )
        # –¢–æ—Ä–≥–æ–≤—ã–µ –≤ demo -> –±–µ–∑ S
        ts1 = self.adapter._normalize_symbol_for_trading("SBTCSUSDT")
        ts2 = self.adapter._normalize_symbol_for_trading("BTCUSDT")
        self.sa.ok(ts1 == "BTCUSDT", f"normalize trade OK: SBTCSUSDT -> {ts1}",
                   f"normalize trade FAIL: –æ–∂–∏–¥–∞–ª–æ—Å—å BTCUSDT, –ø–æ–ª—É—á–∏–ª–∏ {ts1}")
        self.sa.ok(ts2 == "BTCUSDT", f"normalize trade OK: BTCUSDT -> {ts2}",
                   f"normalize trade FAIL: –æ–∂–∏–¥–∞–ª–æ—Å—å BTCUSDT, –ø–æ–ª—É—á–∏–ª–∏ {ts2}")

    async def test_market_data(self):
        # —Ç–∏–∫–µ—Ä
        t = await self.adapter.get_ticker(self.trade_sym)
        self.sa.ok(t is not None, "Ticker –ø–æ–ª—É—á–µ–Ω", "Ticker –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        # —Å—Ç–∞–∫–∞–Ω
        ob = await self.adapter.get_orderbook(self.trade_sym, limit=10)
        self.sa.ok(ob is not None and "bids" in ob and "asks" in ob, "Orderbook –ø–æ–ª—É—á–µ–Ω", "Orderbook –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        # —Å–≤–µ—á–∏
        kl = await self.adapter.get_klines(self.trade_sym, interval="1H", limit=10)
        self.sa.ok(isinstance(kl, list) and len(kl) > 0, "Klines –ø–æ–ª—É—á–µ–Ω—ã", "Klines –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        # funding
        fr = await self.adapter.get_funding_rate(self.trade_sym)
        self.sa.ok(fr is not None, "Funding rate –ø–æ–ª—É—á–µ–Ω", "Funding rate –Ω–µ –ø–æ–ª—É—á–µ–Ω")

    async def test_leverage_margin(self):
        ok1 = await self.adapter.set_leverage(self.trade_sym, 10)
        self.sa.ok(ok1, "Leverage —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "Leverage –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        ok2 = await self.adapter.set_margin_mode(self.trade_sym, "cross")
        self.sa.ok(ok2, "MarginMode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CROSS)", "MarginMode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def test_order_lifecycle(self):
        """
        –ü–ª–∞–Ω:
        - –±–µ—Ä—ë–º last_price –∏–∑ —Ç–∏–∫–µ—Ä–∞
        - –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä (–¥–∞–ª—ë–∫–∏–π –æ—Ç —Ä—ã–Ω–∫–∞) -> –æ—Ç–º–µ–Ω—è–µ–º
        - –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π reduceOnly (0.001 –ª–æ—Ç–∞) –µ—Å–ª–∏ minTradeNum –ø–æ–∑–≤–æ–ª—è–µ—Ç, –æ—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ
        - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        """
        t = await self.adapter.get_ticker(self.trade_sym)
        self.sa.ok(t is not None, "–¶–µ–Ω–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞", "–¶–µ–Ω–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
        if not t:
            return

        info = await self.adapter.get_instrument_info(self.trade_sym)
        self.sa.ok(info is not None, "–ò–Ω—Ñ–æ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–æ", "–ò–Ω—Ñ–æ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
        if not info:
            return

        # —Ä–∞—Å—Å—á—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –ª–∏–º–∏—Ç–∫–∏
        last = float(t.last_price)
        # –ø–æ—Å—Ç–∞–≤–∏–º –¥–∞–ª–µ–∫–æ: –Ω–∞ -20%
        price = last * 0.8
        qty = max(info.min_order_qty,  info.lot_size_filter.get("min", 0.001))
        qty_str = self.adapter.round_quantity(self.trade_sym, qty)
        price_str = self.adapter.round_price(self.trade_sym, price)

        log.info("–°—Ç–∞–≤–∏–º –ª–∏–º–∏—Ç–∫—É: %s %s @ %s", self.trade_sym, qty_str, price_str)
        limit = await self.adapter.place_order(
            symbol=self.trade_sym, side="buy", order_type="limit",
            quantity=float(qty_str), price=float(price_str), time_in_force="GTC"
        )
        self.sa.ok(limit is not None and limit.order_id, "–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â—ë–Ω", "–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω")

        # –ø—Ä–æ–≤–µ—Ä–∏–º pending
        pend = await self.adapter.get_open_orders(self.trade_sym)
        self.sa.ok(isinstance(pend, list), "–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–ø—Ä–æ—à–µ–Ω—ã", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞")

        # –æ—Ç–º–µ–Ω–∏–º –ª–∏–º–∏—Ç–∫—É
        if limit and limit.order_id:
            ok_cancel = await self.adapter.cancel_order(self.trade_sym, order_id=limit.order_id)
            self.sa.ok(ok_cancel, "–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω", "–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–µ –æ—Ç–º–µ–Ω—ë–Ω")

        # –ø–æ–ø—Ä–æ–±—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π reduceOnly (–µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω—É–ª–µ–≤–∞—è ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –±–∏—Ä–∂–∞ –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
        mkt = await self.adapter.place_order(
            symbol=self.trade_sym, side="buy", order_type="market",
            quantity=float(qty_str), reduce_only=True
        )
        # –ù–∞ —á–∏—Å—Ç–æ–º –¥–µ–º–æ reduce_only –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É/None ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º –º—è–≥–∫–æ:
        self.sa.ok(mkt is not None or True, "Market reduceOnly –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "Market reduceOnly –æ—Ç–∫–ª–æ–Ω—ë–Ω")

    async def test_positions_sl_tp_close(self):
        # –ü–æ–∑–∏—Ü–∏–∏ (–æ–±—ã—á–Ω–æ –ø—É—Å—Ç–æ)
        poss = await self.adapter.get_positions(self.trade_sym)
        self.sa.ok(isinstance(poss, list), "–ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º SL/TP (–º—è–≥–∫–æ)
        if poss:
            p = poss[0]
            # SL/TP –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            t = await self.adapter.get_ticker(self.trade_sym)
            if t:
                last = float(t.last_price)
                sl = last * (0.98 if p.side == "Buy" else 1.02)
                tp = last * (1.02 if p.side == "Buy" else 0.98)
                ok = await self.adapter.set_position_stop_loss_take_profit(self.trade_sym, stop_loss=sl, take_profit=tp)
                self.sa.ok(ok, "SL/TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "SL/TP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

            # –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é (–º—è–≥–∫–æ)
            okc = await self.adapter.close_position(self.trade_sym, reduce_only=True)
            self.sa.ok(okc, "–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")

    async def test_rounders(self):
        info = await self.adapter.get_instrument_info(self.trade_sym)
        self.sa.ok(info is not None, "–ò–Ω—Ñ–æ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ", "–ò–Ω—Ñ–æ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
        if not info:
            return
        rp = self.adapter.round_price(self.trade_sym, 12345.678901)
        rq = self.adapter.round_quantity(self.trade_sym, max(0.001, info.min_order_qty * 1.2345))
        self.sa.ok("." in rp or rp.isdigit(), f"round_price -> {rp}", "round_price –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
        self.sa.ok("." in rq or rq.isdigit(), f"round_quantity -> {rq}", "round_quantity –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")

    async def run(self):
        try:
            await self._ensure_adapter()
            await self.test_server_time()
            await self.test_balance()
            await self.test_instruments()
            await self.test_symbol_normalization()
            await self.test_market_data()
            await self.test_leverage_margin()
            await self.test_order_lifecycle()
            await self.test_positions_sl_tp_close()
            await self.test_rounders()
        finally:
            if self.adapter:
                await self.adapter.close()

        ok = self.sa.summary("–ò–¢–û–ì–ò E2E BITGET")
        return 0 if ok else 1


if __name__ == "__main__":
    testnet = os.getenv("BITGET_USE_TESTNET", "1") != "0"
    log.info("============================================================")
    log.info("üöÄ –°—Ç–∞—Ä—Ç e2e BitgetAdapter (testnet=%s)", testnet)
    log.info("============================================================")
    runner = BitgetAdapterE2E(testnet=testnet)
    rc = asyncio.run(runner.run())
    sys.exit(rc)
