#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ BitgetAdapter
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã API
"""

import os
import sys
import asyncio
import logging
from datetime import datetime
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from exchanges.bitget_adapter import BitgetAdapter, create_bitget_adapter
from exchanges.exchange_factory import ExchangeFactory, ExchangeType


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger("BitgetTester")


class BitgetTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bitget –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    
    def __init__(self):
        self.adapter: Optional[BitgetAdapter] = None
        self.test_results = {}
        
    async def setup(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_key = os.getenv("BITGET_TESTNET_API_KEY")
            api_secret = os.getenv("BITGET_TESTNET_API_SECRET")
            api_passphrase = os.getenv("BITGET_TESTNET_API_PASSPHRASE")
            
            if not all([api_key, api_secret, api_passphrase]):
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Bitget –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
                logger.info("  export BITGET_TESTNET_API_KEY='your_key'")
                logger.info("  export BITGET_TESTNET_API_SECRET='your_secret'")
                logger.info("  export BITGET_TESTNET_API_PASSPHRASE='your_passphrase'")
                return False
            
            logger.info("=" * 60)
            logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BitgetAdapter")
            logger.info("=" * 60)
            
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å api_passphrase
            logger.info("\nüìã –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å api_passphrase")
            try:
                self.adapter = BitgetAdapter(
                    api_key=api_key,
                    api_secret=api_secret,
                    api_passphrase=api_passphrase,
                    testnet=True,
                    recv_window=10000
                )
                logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω —Å api_passphrase")
                self.test_results["constructor_api_passphrase"] = True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å api_passphrase: {e}")
                self.test_results["constructor_api_passphrase"] = False
                return False
            
            # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å passphrase (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            logger.info("\nüìã –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å passphrase (–∞–ª–∏–∞—Å)")
            try:
                test_adapter = BitgetAdapter(
                    api_key=api_key,
                    api_secret=api_secret,
                    passphrase=api_passphrase,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å
                    testnet=True
                )
                logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω —Å passphrase (–∞–ª–∏–∞—Å)")
                self.test_results["constructor_passphrase"] = True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å passphrase: {e}")
                self.test_results["constructor_passphrase"] = False
            
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
            logger.info("\nüìã –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ExchangeFactory")
            try:
                factory = ExchangeFactory()
                factory_adapter = factory.create_bitget(
                    api_key=api_key,
                    api_secret=api_secret,
                    passphrase=api_passphrase,
                    testnet=True
                )
                if factory_adapter:
                    logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É")
                    self.test_results["factory_creation"] = True
                else:
                    logger.error("‚ùå –§–∞–±—Ä–∏–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ None")
                    self.test_results["factory_creation"] = False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É: {e}")
                self.test_results["factory_creation"] = False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
            logger.info("\nüìã –¢–µ—Å—Ç 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞")
            try:
                success = await self.adapter.initialize()
                if success:
                    logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    self.test_results["initialization"] = True
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–µ—Ä")
                    self.test_results["initialization"] = False
                    return False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                self.test_results["initialization"] = False
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ setup: {e}")
            return False
    
    async def test_server_time(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("\nüìã –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        try:
            server_time = await self.adapter.get_server_time()
            if server_time > 0:
                dt = datetime.fromtimestamp(server_time / 1000)
                logger.info(f"‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {dt.strftime('%Y-%m-%d %H:%M:%S')}")
                self.test_results["server_time"] = True
            else:
                logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞")
                self.test_results["server_time"] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.test_results["server_time"] = False
    
    async def test_balance(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        logger.info("\nüìã –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)")
        try:
            balance = await self.adapter.get_balance("USDT")
            if balance:
                logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å USDT:")
                logger.info(f"   - –î–æ—Å—Ç—É–ø–Ω–æ: {balance.free:.4f}")
                logger.info(f"   - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {balance.locked:.4f}")
                logger.info(f"   - –í—Å–µ–≥–æ: {balance.total:.4f}")
                self.test_results["balance"] = True
            else:
                logger.warning("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ–π –∞–∫–∫–∞—É–Ω—Ç)")
                self.test_results["balance"] = True  # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            self.test_results["balance"] = False
    
    async def test_instruments(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("\nüìã –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        try:
            instruments = await self.adapter.get_all_instruments()
            if instruments:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(instruments)}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                for i, inst in enumerate(instruments[:5]):
                    logger.info(f"   {i+1}. {inst.symbol} - –ü–ª–µ—á–æ: 1-{inst.leverage_filter['max']}")
                self.test_results["instruments"] = True
            else:
                logger.error("‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
                self.test_results["instruments"] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            self.test_results["instruments"] = False
    
    async def test_ticker(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞"""
        logger.info("\nüìã –¢–µ—Å—Ç 8: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ BTCUSDT")
        try:
            ticker = await self.adapter.get_ticker("BTCUSDT")
            if ticker:
                logger.info(f"‚úÖ –¢–∏–∫–µ—Ä BTCUSDT:")
                logger.info(f"   - –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${ticker.last:,.2f}")
                logger.info(f"   - Bid: ${ticker.bid:,.2f}")
                logger.info(f"   - Ask: ${ticker.ask:,.2f}")
                logger.info(f"   - –û–±—ä–µ–º: {ticker.volume:,.2f}")
                self.test_results["ticker"] = True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä")
                self.test_results["ticker"] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞: {e}")
            self.test_results["ticker"] = False
    
    async def test_klines(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π"""
        logger.info("\nüìã –¢–µ—Å—Ç 9: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π BTCUSDT")
        try:
            klines = await self.adapter.get_klines("BTCUSDT", interval="1h", limit=10)
            if klines:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(klines)}")
                latest = klines[-1] if klines else None
                if latest:
                    dt = datetime.fromtimestamp(latest.timestamp / 1000)
                    logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ ({dt.strftime('%Y-%m-%d %H:%M')})")
                    logger.info(f"   - Open:  ${latest.open:,.2f}")
                    logger.info(f"   - High:  ${latest.high:,.2f}")
                    logger.info(f"   - Low:   ${latest.low:,.2f}")
                    logger.info(f"   - Close: ${latest.close:,.2f}")
                self.test_results["klines"] = True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏")
                self.test_results["klines"] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π: {e}")
            self.test_results["klines"] = False
    
    async def test_positions(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        logger.info("\nüìã –¢–µ—Å—Ç 10: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        try:
            positions = await self.adapter.get_positions()
            if positions:
                logger.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
                for pos in positions:
                    logger.info(f"   - {pos.symbol}: {pos.side} {pos.size} @ ${pos.entry_price:,.2f}")
            else:
                logger.info("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            self.test_results["positions"] = True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            self.test_results["positions"] = False
    
    async def test_order_placement(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
        logger.info("\nüìã –¢–µ—Å—Ç 11: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = await self.adapter.get_ticker("BTCUSDT")
            if not ticker:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–µ—Å—Ç–∞ –æ—Ä–¥–µ—Ä–∞")
                self.test_results["order_placement"] = False
                return
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –¥–∞–ª–µ–∫–æ –æ—Ç —Ä—ã–Ω–∫–∞
            test_price = ticker.last * 0.8  # 20% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
            test_size = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            
            logger.info(f"   –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä: BUY {test_size} BTC @ ${test_price:,.2f}")
            
            order = await self.adapter.place_order(
                symbol="BTCUSDT",
                side="buy",
                order_type="limit",
                quantity=test_size,
                price=test_price,
                client_order_id=f"test_{int(datetime.now().timestamp())}"
            )
            
            if order:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order.order_id}")
                self.test_results["order_place"] = True
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π
                await asyncio.sleep(2)
                
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                logger.info(f"   –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä {order.order_id}")
                cancelled = await self.adapter.cancel_order(
                    symbol="BTCUSDT",
                    order_id=order.order_id
                )
                
                if cancelled:
                    logger.info("‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
                    self.test_results["order_cancel"] = True
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä")
                    self.test_results["order_cancel"] = False
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")
                logger.info("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                logger.info("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ demo –∞–∫–∫–∞—É–Ω—Ç–µ")
                logger.info("   - –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏ –∏–ª–∏ –ø—Ä–∞–≤–∞")
                logger.info("   - Demo —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ paptrading –∑–∞–≥–æ–ª–æ–≤–æ–∫)")
                self.test_results["order_place"] = False
                self.test_results["order_cancel"] = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            self.test_results["order_placement"] = False
    
    async def test_leverage(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞"""
        logger.info("\nüìã –¢–µ—Å—Ç 12: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞")
        try:
            success = await self.adapter.set_leverage("BTCUSDT", 10)
            if success:
                logger.info("‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 10x")
                self.test_results["leverage"] = True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)")
                self.test_results["leverage"] = True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {e}")
            self.test_results["leverage"] = False
    
    async def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)
        
        passed = sum(1 for v in self.test_results.values() if v)
        total = len(self.test_results)
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ" if result else "‚ùå"
            logger.info(f"{status} {test_name.replace('_', ' ').title()}")
        
        logger.info("-" * 60)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            logger.info("‚úÖ BitgetAdapter –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        elif passed >= total * 0.8:
            logger.info("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            logger.info("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ failed —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
        else:
            logger.info("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞")
            logger.info("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–æ–∫")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.adapter:
            await self.adapter.close()
            logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
            if not await self.setup():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                return
            
            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
            await self.test_server_time()
            await self.test_balance()
            await self.test_instruments()
            await self.test_ticker()
            await self.test_klines()
            await self.test_positions()
            await self.test_order_placement()
            await self.test_leverage()
            
            # –ò—Ç–æ–≥–∏
            await self.print_summary()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.cleanup()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BitgetTester()
    await tester.run()


if __name__ == "__main__":
    asyncio.run(main())
