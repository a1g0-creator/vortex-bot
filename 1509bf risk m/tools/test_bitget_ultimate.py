#!/usr/bin/env python3
"""
–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç BitgetAdapter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
"""

import os
import sys
import asyncio
import logging
from datetime import datetime

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from exchanges.bitget_adapter import BitgetAdapter

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger("BitgetUltimateTest")


class BitgetUltimateTester:
    def __init__(self):
        self.adapter = None
        self.test_results = {}
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∞–¥–∞–ø—Ç–µ—Ä —Å–∞–º –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç
        self.test_symbol = "BTCUSDT"
        
    async def setup(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        try:
            api_key = os.getenv("BITGET_TESTNET_API_KEY")
            api_secret = os.getenv("BITGET_TESTNET_API_SECRET")
            api_passphrase = os.getenv("BITGET_TESTNET_API_PASSPHRASE")
            
            if not all([api_key, api_secret, api_passphrase]):
                logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            logger.info("=" * 60)
            logger.info("üöÄ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BITGET ADAPTER")
            logger.info("=" * 60)
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª BTCUSDT –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤")
            logger.info("–ê–¥–∞–ø—Ç–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç:")
            logger.info("  - BTCUSDT -> SBTCSUSDT –¥–ª—è –º–∞—Ä–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            logger.info("  - BTCUSDT -> BTCUSDT –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
            
            self.adapter = BitgetAdapter(
                api_key=api_key,
                api_secret=api_secret,
                api_passphrase=api_passphrase,
                testnet=True
            )
            
            success = await self.adapter.initialize()
            if success:
                logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self.test_results["initialization"] = True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                self.test_results["initialization"] = False
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ setup: {e}")
            return False
    
    async def test_balance(self):
        """–¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞"""
        logger.info("\nüìã –¢–µ—Å—Ç 1: –ë–∞–ª–∞–Ω—Å")
        try:
            balance = await self.adapter.get_balance("USDT")
            if balance:
                logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å USDT: {balance.available_balance:.2f}")
                self.test_results["balance"] = True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
                self.test_results["balance"] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["balance"] = False
    
    async def test_ticker(self):
        """–¢–µ—Å—Ç —Ç–∏–∫–µ—Ä–∞ —Å –æ–±—ã—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º"""
        logger.info(f"\nüìã –¢–µ—Å—Ç 2: –¢–∏–∫–µ—Ä {self.test_symbol}")
        try:
            ticker = await self.adapter.get_ticker(self.test_symbol)
            if ticker and ticker.last_price > 0:
                logger.info(f"‚úÖ –¶–µ–Ω–∞ {self.test_symbol}: ${ticker.last_price:,.2f}")
                self.test_results["ticker"] = True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä")
                self.test_results["ticker"] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["ticker"] = False
    
    async def test_klines(self):
        """–¢–µ—Å—Ç —Å–≤–µ—á–µ–π"""
        logger.info(f"\nüìã –¢–µ—Å—Ç 3: –°–≤–µ—á–∏ {self.test_symbol}")
        try:
            klines = await self.adapter.get_klines(self.test_symbol, interval="1H", limit=5)
            if klines:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π")
                latest = klines[-1]
                logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è: Open=${latest.open:,.2f}, Close=${latest.close:,.2f}")
                self.test_results["klines"] = True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏")
                self.test_results["klines"] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["klines"] = False
    
    async def test_leverage(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞"""
        logger.info(f"\nüìã –¢–µ—Å—Ç 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è {self.test_symbol}")
        try:
            success = await self.adapter.set_leverage(self.test_symbol, 10)
            if success:
                logger.info("‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 10x")
                self.test_results["leverage"] = True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ")
                self.test_results["leverage"] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["leverage"] = False
    
    async def test_margin_mode(self):
        """–¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –º–∞—Ä–∂–∏"""
        logger.info(f"\nüìã –¢–µ—Å—Ç 5: –†–µ–∂–∏–º –º–∞—Ä–∂–∏ –¥–ª—è {self.test_symbol}")
        try:
            success = await self.adapter.set_margin_mode(self.test_symbol, "CROSS")
            if success:
                logger.info("‚úÖ –†–µ–∂–∏–º –º–∞—Ä–∂–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ CROSS")
                self.test_results["margin_mode"] = True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏")
                self.test_results["margin_mode"] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["margin_mode"] = False
    
    async def test_order(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
        logger.info(f"\nüìã –¢–µ—Å—Ç 6: –û—Ä–¥–µ—Ä {self.test_symbol}")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
            ticker = await self.adapter.get_ticker(self.test_symbol)
            if not ticker:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")
                self.test_results["order"] = False
                return
            
            # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–∞–ª–µ–∫–æ –æ—Ç —Ä—ã–Ω–∫–∞
            test_price = ticker.last_price * 0.5  # 50% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
            test_size = 0.001
            
            logger.info(f"   –†–∞–∑–º–µ—â–∞–µ–º: BUY {test_size} @ ${test_price:,.2f}")
            
            order = await self.adapter.place_order(
                symbol=self.test_symbol,
                side="buy",
                order_type="limit",
                quantity=test_size,
                price=test_price
            )
            
            if order:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order.order_id}")
                
                # –û—Ç–º–µ–Ω—è–µ–º
                await asyncio.sleep(1)
                cancelled = await self.adapter.cancel_order(
                    symbol=self.test_symbol,
                    order_id=order.order_id
                )
                
                if cancelled:
                    logger.info("‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                    self.test_results["order"] = True
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å")
                    self.test_results["order"] = False
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")
                self.test_results["order"] = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["order"] = False
    
    async def test_positions(self):
        """–¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–π"""
        logger.info("\nüìã –¢–µ—Å—Ç 7: –ü–æ–∑–∏—Ü–∏–∏")
        try:
            positions = await self.adapter.get_positions()
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏–π: {len(positions)}")
            self.test_results["positions"] = True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["positions"] = False
    
    async def print_summary(self):
        """–ò—Ç–æ–≥–∏"""
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–ò")
        logger.info("=" * 60)
        
        passed = sum(1 for v in self.test_results.values() if v)
        total = len(self.test_results)
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ" if result else "‚ùå"
            logger.info(f"{status} {test_name}")
        
        logger.info("-" * 60)
        percentage = (passed / total * 100) if total > 0 else 0
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} ({percentage:.0f}%)")
        
        if passed == total:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            logger.info("‚úÖ BitgetAdapter –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        elif passed >= total * 0.8:
            logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω")
        else:
            logger.info("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞"""
        if self.adapter:
            await self.adapter.close()
            logger.info("üîí –ó–∞–∫—Ä—ã—Ç–æ")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        try:
            if not await self.setup():
                return
            
            await self.test_balance()
            await self.test_ticker()
            await self.test_klines()
            await self.test_leverage()
            await self.test_margin_mode()
            await self.test_order()
            await self.test_positions()
            
            await self.print_summary()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.cleanup()


if __name__ == "__main__":
    asyncio.run(BitgetUltimateTester().run())
