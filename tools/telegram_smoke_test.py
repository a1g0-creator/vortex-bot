#!/usr/bin/env python3
import asyncio
import sys
import logging
from pathlib import Path
from datetime import datetime

# –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).resolve().parents[1]
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from config.config_loader import config_loader
# –í–ê–ñ–ù–û: –∏–º–ø–æ—Ä—Ç –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ telegram_bot.py –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
from telegram_bot import TelegramBot

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger("TelegramSmoke")

EXPECTED_COMMANDS = {
    "start","status","balance","positions","mode",
    "risk","risk_show","risk_set","risk_enable","risk_disable","risk_reset","help"
}

async def test_telegram_smoke():
    logger.info("=" * 50)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram smoke-—Ç–µ—Å—Ç–∞")
    logger.info("=" * 50)

    # 1) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    logger.info("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ telegram.yaml...")
    config_loader.load_all_configs()
    tg_cfg = config_loader.get_config("telegram")
    bot_cfg = tg_cfg.get("bot", {}) if isinstance(tg_cfg, dict) else {}
    token = bot_cfg.get("token") or bot_cfg.get("bot_token")
    chat_id = bot_cfg.get("chat_id") or bot_cfg.get("admin_chat_id") or bot_cfg.get("channel_id")
    if not token or not chat_id:
        raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç token –∏–ª–∏ chat_id –≤ telegram.yaml (bot.token/bot_token –∏ chat_id/admin_chat_id/channel_id)")

    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
    logger.info(f"   Token: {token[:10]}...")
    logger.info(f"   Chat ID: {chat_id}")

    # 2) –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–±–µ–∑ –º–æ–∫–æ–≤)
    logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ TelegramBot...")
    bot = TelegramBot(token=str(token), chat_id=str(chat_id), trading_bot_instance=None)

    # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    ok = await bot.initialize()
    if not ok:
        raise RuntimeError("initialize() –≤–µ—Ä–Ω—É–ª False")
    logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.info(f"   Consumer –∑–∞–ø—É—â–µ–Ω: {bot.consumer_task is not None and not bot.consumer_task.done()}")
    logger.info(f"   –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {bot.notification_queue.qsize() if bot.notification_queue else 'n/a'}")

    # 4) getMe
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (getMe)...")
    me = await bot.application.bot.get_me()
    logger.info(f"‚úÖ –ë–æ—Ç: @{me.username} (id={me.id})")

    # 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ API
    cmds = await bot.application.bot.get_my_commands()
    got = {c.command for c in cmds}
    if got != EXPECTED_COMMANDS:
        raise RuntimeError(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: expected={sorted(EXPECTED_COMMANDS)}, got={sorted(got)}")
    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: {len(got)}")

    # 6) –°—Ç–∞—Ä—Ç
    logger.info("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –±–æ—Ç–∞...")
    await bot.start()

    # 7) –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ send_message
    logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    assert await bot.send_message(f"TEST: telegram smoke ‚Ä¢ {datetime.now():%Y-%m-%d %H:%M:%S}"), "send_message() –≤–µ—Ä–Ω—É–ª False"

    # 8) Backward-compat API: notify / notify_risk / notify_signal
    logger.info("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: notify/notify_risk/notify_signal")
    assert await bot.notify("üìå smoke: notify"), "notify() –≤–µ—Ä–Ω—É–ª False"
    assert await bot.notify_risk("üõ°Ô∏è smoke: notify_risk"), "notify_risk() –≤–µ—Ä–Ω—É–ª False"
    assert await bot.notify_signal("BTCUSDT", "–û—Ç–∫—Ä—ã—Ç—å LONG", 63000.5, reason="smoke"), "notify_signal() –≤–µ—Ä–Ω—É–ª False"

    # –î–∞—Ç—å consumer –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ
    await asyncio.sleep(2)

    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bot.messages_sent}")
    logger.info(f"   –û—à–∏–±–æ–∫: {bot.messages_failed}")
    logger.info(f"   –í –æ—á–µ—Ä–µ–¥–∏: {bot.notification_queue.qsize()}")

    # 9) –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await bot.stop()
    logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    logger.info("=" * 50)
    logger.info("‚úÖ TELEGRAM SMOKE TEST PASSED")
    logger.info("=" * 50)
    return True

if __name__ == "__main__":
    try:
        asyncio.run(test_telegram_smoke())
    except SystemExit:
        raise
    except Exception as e:
        logger.exception("‚ùå TELEGRAM SMOKE TEST FAILED: %s", e)
        sys.exit(1)

