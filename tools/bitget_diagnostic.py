#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitget
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
"""

import asyncio
import sys
import os
import logging
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BITGET")
    print("=" * 50)
    
    # ========================================
    # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    # ========================================
    print("üìÇ –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("-" * 30)
    
    required_files = [
        "config/exchanges.yaml",
        "exchanges/bitget_adapter.py", 
        "exchanges/exchange_factory.py",
        "exchanges/base_exchange.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} - –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    # ========================================
    # –®–ê–ì 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    # ========================================
    print("\n‚öôÔ∏è –®–ê–ì 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("-" * 30)
    
    try:
        from config.config_loader import config_loader
        exchanges_config = config_loader.get_config("exchanges")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏
        enabled_exchanges = exchanges_config.get("exchanges", {}).get("enabled", [])
        print(f"üìä –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {enabled_exchanges}")
        
        if "bitget" not in enabled_exchanges:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Bitget –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–∏—Ä–∂!")
            print("üîß –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤—å—Ç–µ 'bitget' –≤ exchanges.enabled –≤ exchanges.yaml")
            return False
        else:
            print("‚úÖ Bitget –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # ========================================
    # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Bitget
    # ========================================
    print("\nüè™ –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Bitget")
    print("-" * 30)
    
    try:
        bitget_config = exchanges_config.get("bitget", {})
        if not bitget_config:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–µ–∫—Ü–∏—è 'bitget' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ exchanges.yaml!")
            return False
        
        print("‚úÖ –°–µ–∫—Ü–∏—è bitget –Ω–∞–π–¥–µ–Ω–∞")
        print(f"üìä Bitget enabled: {bitget_config.get('enabled', False)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º testnet/mainnet –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        testnet_config = bitget_config.get("testnet", {})
        mainnet_config = bitget_config.get("mainnet", {})
        
        testnet_enabled = testnet_config.get("enabled", False)
        mainnet_enabled = mainnet_config.get("enabled", False)
        
        print(f"üìä Testnet enabled: {testnet_enabled}")
        print(f"üìä Mainnet enabled: {mainnet_enabled}")
        
        if not testnet_enabled and not mainnet_enabled:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∏ testnet, –Ω–∏ mainnet –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã!")
            print("üîß –†–ï–®–ï–ù–ò–ï: –í–∫–ª—é—á–∏—Ç–µ testnet: enabled: true –¥–ª—è demo –∫–ª—é—á–µ–π")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é —Å–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        if testnet_enabled:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º TESTNET –¥–ª—è demo –∫–ª—é—á–µ–π")
            network = "testnet"
            network_config = testnet_config
        else:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º MAINNET")
            network = "mainnet"
            network_config = mainnet_config
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False
    
    # ========================================
    # –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    # ========================================
    print(f"\nüîë –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π ({network})")
    print("-" * 30)
    
    try:
        api_credentials = bitget_config.get("api_credentials", {}).get(network, {})
        
        api_key = api_credentials.get("api_key", "")
        api_secret = api_credentials.get("api_secret", "")
        api_passphrase = api_credentials.get("passphrase", "")
        
        # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        masked_key = api_key[:10] + "..." if len(api_key) > 10 else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"
        masked_secret = api_secret[:10] + "..." if len(api_secret) > 10 else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"
        masked_passphrase = api_passphrase[:6] + "..." if len(api_passphrase) > 6 else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"
        
        print(f"üîç API Key: {masked_key} ({len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"üîç API Secret: {masked_secret} ({len(api_secret)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"üîç Passphrase: {masked_passphrase} ({len(api_passphrase)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        if not all([api_key, api_secret, api_passphrase]):
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ API –∫–ª—é—á–∏!")
            print("üîß –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ —Ç—Ä–∏ –∫–ª—é—á–∞ –≤ exchanges.yaml:")
            print("   api_credentials:")
            print("     testnet:")
            print("       api_key: 'bg_–≤–∞—à_demo_key'")
            print("       api_secret: '–≤–∞—à_demo_secret'")
            print("       passphrase: '–≤–∞—à_demo_passphrase'")
            return False
        
        print("‚úÖ –í—Å–µ API –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π: {e}")
        return False
    
    # ========================================
    # –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
    # ========================================
    print("\nüì¶ –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞")
    print("-" * 30)
    
    try:
        from exchanges.bitget_adapter import BitgetAdapter
        print("‚úÖ BitgetAdapter –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from exchanges.exchange_factory import ExchangeFactory, ExchangeType
        print("‚úÖ ExchangeFactory –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Bitget –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–±—Ä–∏–∫–µ
        factory = ExchangeFactory()
        supported = factory.get_supported_exchanges()
        print(f"üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏: {supported}")
        
        if "bitget" not in supported:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Bitget –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ ExchangeFactory!")
            print("üîß –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ exchange_factory.py –µ—Å—Ç—å:")
            print("   from .bitget_adapter import BitgetAdapter")
            print("   ExchangeType.BITGET: BitgetAdapter –≤ _adapters")
            return False
        else:
            print("‚úÖ Bitget –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–±—Ä–∏–∫–µ")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üîß –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ bitget_adapter.py")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # ========================================
    # –®–ê–ì 6: –°–æ–∑–¥–∞–Ω–∏–µ Bitget –∞–¥–∞–ø—Ç–µ—Ä–∞
    # ========================================
    print("\nüèóÔ∏è –®–ê–ì 6: –°–æ–∑–¥–∞–Ω–∏–µ Bitget –∞–¥–∞–ø—Ç–µ—Ä–∞")
    print("-" * 30)
    
    try:
        adapter = BitgetAdapter(
            api_key=api_key,
            api_secret=api_secret,
            api_passphrase=api_passphrase,
            testnet=testnet_enabled,
            recv_window=10000
        )
        print("‚úÖ Bitget –∞–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä Base URL: {adapter.base_url}")
        print(f"üìä WebSocket URL: {getattr(adapter, 'ws_url', adapter.WEBSOCKET_URL)}")
        print(f"üìä Testnet mode: {adapter.testnet}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
        return False
    
    # ========================================
    # –®–ê–ì 7: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
    # ========================================
    print("\nüöÄ –®–ê–ì 7: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞")
    print("-" * 30)
    
    try:
        init_result = await adapter.initialize()
        if init_result:
            print("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        print("üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        return False
    
    # ========================================
    # –®–ê–ì 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    # ========================================
    print("\nüß™ –®–ê–ì 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("-" * 30)
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        print("üïí –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        server_time = await adapter._get_server_time()
        if server_time:
            print(f"‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ: {server_time}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞")
            
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        print("üí∞ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")
        balance = await adapter.get_balance()
        if balance:
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {balance.wallet_balance} USDT")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {balance.available_balance} USDT")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {balance.used_balance} USDT")
            print(f"   –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: {balance.unrealized_pnl} USDT")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
            
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        print("üìä –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
        positions = await adapter.get_positions()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π")
        if positions:
            for pos in positions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–∑–∏—Ü–∏–∏
                print(f"   {pos.symbol}: {pos.side} {pos.size} @ {pos.entry_price}")
                
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        print("üìã –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö...")
        instruments = await adapter.get_instruments()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        if instruments:
            print(f"üìã –ü—Ä–∏–º–µ—Ä: {instruments[0].get('symbol', 'N/A')}")
            
        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ BTCUSDT
        print("üìà –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ BTCUSDT...")
        ticker = await adapter.get_ticker("BTCUSDT")
        if ticker:
            print(f"‚úÖ –¢–∏–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω: {ticker.symbol} = ${ticker.last_price:.2f}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        print("üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
    
    # ========================================
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    # ========================================
    try:
        await adapter.close()
        print("üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
    
    # ========================================
    # –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°
    # ========================================
    print("\nüéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°")
    print("=" * 30)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìä –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitget —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚ùå –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º –≤—ã—à–µ")
    
    return True

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
