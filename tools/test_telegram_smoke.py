#!/usr/bin/env python3
"""
Smoke-—Ç–µ—Å—Ç–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(PROJECT_ROOT))

from telegram_bot.telegram_bot import TelegramBot
from config.config_loader import config_loader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger("TelegramSmoke")


class MockTradingBot:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è trading_bot_instance"""
    def __init__(self):
        self.is_running = True
        self.start_time = 0
        self.mode = "test"
        self.positions = {}
        self.signals_count = 0
        self.trades_count = 0
        self.risk_manager = None


async def test_telegram_smoke():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π smoke-—Ç–µ—Å—Ç Telegram –±–æ—Ç–∞
    –†–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    """
    bot = None
    
    try:
        logger.info("=" * 50)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram smoke-—Ç–µ—Å—Ç–∞")
        logger.info("=" * 50)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ telegram.yaml...")
        telegram_config = config_loader.get_config("telegram")
        
        if not telegram_config:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å telegram.yaml")
            return False
        
        bot_config = telegram_config.get("bot", {})
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –∏ chat_id —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–ª—é—á–µ–π
        token = (bot_config.get("token") or 
                bot_config.get("bot_token") or 
                telegram_config.get("token"))
        
        chat_id = (bot_config.get("chat_id") or 
                  bot_config.get("channel_id") or 
                  bot_config.get("admin_chat_id") or
                  telegram_config.get("chat_id"))
        
        if not token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏: bot.token, bot.bot_token, token")
            return False
        
        if not chat_id:
            logger.error("‚ùå Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏: bot.chat_id, bot.channel_id, bot.admin_chat_id")
            return False
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        logger.info(f"   Token: {token[:20]}...")
        logger.info(f"   Chat ID: {chat_id}")
        
        # 2. –°–æ–∑–¥–∞—ë–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TelegramBot...")
        mock_trading = MockTradingBot()
        bot = TelegramBot(token=token, chat_id=chat_id, trading_bot_instance=mock_trading)
        
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        init_result = await bot.initialize()
        
        if not init_result:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return False
        
        logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"   –ö–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é: 11")
        logger.info(f"   Consumer –∑–∞–ø—É—â–µ–Ω: {bot.consumer_task is not None}")
        logger.info(f"   –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {bot.notification_queue.qsize()}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º getMe API
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API (getMe)...")
        try:
            bot_info = await bot.application.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} (ID: {bot_info.id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return False
        
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        test_message = (
            "üß™ *TELEGRAM SMOKE TEST*\n\n"
            "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
            "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            "‚úÖ –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞\n"
            "‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\n"
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å."
        )
        
        result = await bot.send_message(test_message)
        
        if not result:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å")
            return False
        
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
        
        # 5. –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ (3 —Å–µ–∫)...")
        await asyncio.sleep(3)
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bot.messages_sent}")
        logger.info(f"   –û—à–∏–±–æ–∫: {bot.messages_failed}")
        logger.info(f"   –í –æ—á–µ—Ä–µ–¥–∏: {bot.notification_queue.qsize()}")
        
        if bot.messages_sent > 0:
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
        else:
            logger.error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False
        
        # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
        
        # –¢–µ—Å—Ç send_signal
        await bot.send_signal("BTCUSDT", "Buy", 45000.50, "Test signal")
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç notify
        await bot.notify("üìå –¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ notify")
        await asyncio.sleep(1)
        
        logger.info(f"‚úÖ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {bot.messages_sent}")
        
        # 8. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await bot.stop()
        
        logger.info("=" * 50)
        logger.info("‚úÖ TELEGRAM SMOKE TEST PASSED")
        logger.info("=" * 50)
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ smoke-—Ç–µ—Å—Ç–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False
        
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞
        if bot and bot.is_running:
            try:
                await bot.stop()
            except:
                pass


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    success = await test_telegram_smoke()
    
    if success:
        logger.info("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram —á–∞—Ç - —Ç–∞–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        sys.exit(0)
    else:
        logger.error("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.error("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ telegram.yaml")
        logger.error("2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å chat_id –≤ telegram.yaml") 
        logger.error("3. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É")
        logger.error("4. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())