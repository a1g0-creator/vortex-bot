#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
–ó–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–µ–Ω—é
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(PROJECT_ROOT))

from telegram import Bot, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from config.config_loader import config_loader

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger("ResetCommands")


async def force_reset_commands():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        telegram_config = config_loader.get_config("telegram")
        bot_config = telegram_config.get("bot", {})
        
        token = (bot_config.get("token") or 
                bot_config.get("bot_token") or 
                telegram_config.get("token"))
        
        chat_id = (bot_config.get("chat_id") or 
                  bot_config.get("channel_id") or 
                  telegram_config.get("chat_id"))
        
        if not token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É...")
        bot = Bot(token=token)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ @{bot_info.username}")
        
        # –®–∞–≥ 1: –û—á–∏—â–∞–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö scopes
        logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥...")
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        await bot.delete_my_commands()
        logger.info("  ‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        
        # –î–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        for lang in [None, "ru", "en", "es", "de", "fr"]:
            try:
                await bot.delete_my_commands(language_code=lang)
                if lang:
                    logger.info(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —è–∑—ã–∫–∞: {lang}")
            except:
                pass
        
        # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if chat_id:
            try:
                scope = BotCommandScopeChat(chat_id=int(chat_id))
                await bot.delete_my_commands(scope=scope)
                logger.info(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–∞: {chat_id}")
            except:
                pass
        
        logger.info("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã")
        
        # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(1)
        
        # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã Vortex Trading Bot
        logger.info("üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥...")
        
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
            BotCommand("balance", "üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"),
            BotCommand("positions", "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"),
            BotCommand("mode", "‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"),
            BotCommand("risk", "üõ°Ô∏è –°—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤"),
            BotCommand("risk_show", "üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã"),
            BotCommand("risk_set", "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç"),
            BotCommand("risk_enable", "üîÑ –í–∫–ª/–≤—ã–∫–ª —Ä–∏—Å–∫–∏"),
            BotCommand("risk_reset", "üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤"),
            BotCommand("help", "üÜò –ü–æ–º–æ—â—å")
        ]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
        await bot.set_my_commands(commands)
        logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –≥–ª–æ–±–∞–ª—å–Ω–æ")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
        await bot.set_my_description(
            "Vortex Trading Bot v2.1 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"
        )
        await bot.set_my_short_description(
            "–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å Vortex Bands —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"
        )
        logger.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞")
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        current_commands = await bot.get_my_commands()
        logger.info(f"\nüìã –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:")
        for cmd in current_commands:
            logger.info(f"  ‚Ä¢ /{cmd.command} - {cmd.description}")
        
        logger.info("\n‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.info("\n‚ö†Ô∏è –í–ê–ñ–ù–û:")
        logger.info("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
        logger.info("2. –ò–ª–∏ –æ—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram")
        logger.info("3. –í —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ '/' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


async def main():
    success = await force_reset_commands()
    
    if not success:
        logger.error("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        sys.exit(1)
    
    sys.exit(0)


if __name__ == "__main__":
    asyncio.run(main())