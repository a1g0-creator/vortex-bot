#!/usr/bin/env python
"""
–¢–µ—Å—Ç Risk Manager —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π (–¥–µ–º–æ-—Å—á–µ—Ç)
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.config_loader import config_loader
from exchanges.exchange_factory import exchange_factory
from core.trading_engine import TradingEngine
from core.risk_manager import RiskManager

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger("RiskManagerLiveTest")


async def test_risk_limits():
    """–¢–µ—Å—Ç –¥–Ω–µ–≤–Ω—ã—Ö –∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    logger.info("=" * 60)
    logger.info("üî¨ RISK MANAGER LIVE TESTING")
    logger.info("=" * 60)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bitget –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    exchange = exchange_factory.create_bitget_from_config()
    await exchange.initialize()
    
    # –°–æ–∑–¥–∞–µ–º Trading Engine
    engine = TradingEngine(exchange, mode="signals")
    await engine.initialize()
    
    logger.info(f"‚úÖ Trading Engine initialized")
    logger.info(f"üí∞ Initial capital: {engine.risk_manager.initial_capital:.2f} USDT")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ë–ï–ó get_risk_status
    logger.info("\nüìä TEST 1: Daily Limits (Direct Access)")
    logger.info("-" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ risk_manager
    from core.risk_manager import _risk_metrics, get_daily_max_abs_loss, get_daily_max_trades, get_daily_max_drawdown_pct
    
    daily_loss_limit = await get_daily_max_abs_loss()
    daily_trades_limit = await get_daily_max_trades()
    daily_drawdown_limit = await get_daily_max_drawdown_pct()
    
    logger.info(f"Daily P&L: {_risk_metrics.daily_pnl:.2f} USDT")
    logger.info(f"Daily trades: {_risk_metrics.daily_trades_count}")
    logger.info(f"Daily loss limit: {daily_loss_limit:.2f} USDT")
    logger.info(f"Daily trades limit: {daily_trades_limit}")
    logger.info(f"Daily drawdown limit: {daily_drawdown_limit:.1f}%")
    logger.info(f"Trading allowed: {_risk_metrics.trading_allowed}")
    
    # –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    logger.info("\nüìä TEST 2: Simulate Trade Permissions")
    logger.info("-" * 40)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    test_positions = [
        ("BTCUSDT", "Buy", 200),    # 1% –æ—Ç 20k (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ª–∏–º–∏—Ç–æ–º 2%)
        ("ETHUSDT", "Buy", 300),    # 1.5% –æ—Ç 20k (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏)
        ("XRPUSDT", "Buy", 500),    # 2.5% –æ—Ç 20k (–ù–ï –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏)
    ]
    
    for symbol, side, value in test_positions:
        try:
            can_trade, reason = await asyncio.wait_for(
                engine.risk_manager.check_trade_permission(
                    symbol=symbol,
                    side=side,
                    position_value=value,
                    leverage=1
                ),
                timeout=2.0
            )
            risk_pct = (value / 20000) * 100
            logger.info(f"{symbol}: ${value} ({risk_pct:.1f}%) - Can trade: {can_trade}")
            if not can_trade:
                logger.info(f"  Reason: {reason}")
        except asyncio.TimeoutError:
            logger.warning(f"{symbol}: Timeout checking permission")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    logger.info("\nüìä TEST 3: Weekly Limits")
    logger.info("-" * 40)
    
    from core.risk_manager import get_weekly_max_abs_loss, get_weekly_max_drawdown_pct
    
    weekly_loss_limit = await get_weekly_max_abs_loss()
    weekly_drawdown_limit = await get_weekly_max_drawdown_pct()
    
    logger.info(f"Weekly P&L: {_risk_metrics.weekly_pnl:.2f} USDT")
    logger.info(f"Weekly trades: {_risk_metrics.weekly_trades_count}")
    logger.info(f"Weekly loss limit: {weekly_loss_limit:.2f} USDT")
    logger.info(f"Weekly drawdown limit: {weekly_drawdown_limit:.1f}%")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    logger.info("\nüìä TEST 4: Position Limits")
    logger.info("-" * 40)
    
    from core.risk_manager import get_position_max_concurrent, get_position_max_risk_pct, get_position_max_leverage
    
    max_positions = await get_position_max_concurrent()
    max_risk_pct = await get_position_max_risk_pct()
    max_leverage = await get_position_max_leverage()
    
    logger.info(f"Current positions: {_risk_metrics.current_positions}")
    logger.info(f"Max positions: {max_positions}")
    logger.info(f"Max risk per position: {max_risk_pct}%")
    logger.info(f"Max leverage: {max_leverage}x")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ risk.yaml
    logger.info("\nüìä TEST 5: Configuration Check")
    logger.info("-" * 40)
    
    risk_config = config_loader.get_config("risk")
    if risk_config:
        logger.info("‚úÖ risk.yaml loaded successfully")
        logger.info(f"  Enabled: {risk_config.get('enabled', False)}")
        logger.info(f"  Daily max loss: {risk_config.get('daily', {}).get('max_abs_loss', 0)} USDT")
        logger.info(f"  Position max risk: {risk_config.get('position', {}).get('max_risk_pct', 0)}%")
    else:
        logger.warning("‚ö†Ô∏è risk.yaml not found or not loaded")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    await engine.close()
    logger.info("\n‚úÖ Risk Manager test completed successfully")


async def test_with_small_order():
    """–¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–æ–≤—ã–º –æ—Ä–¥–µ—Ä–æ–º"""
    
    logger.info("\n" + "=" * 60)
    logger.info("üö® MINIMAL ORDER TEST (DEMO ACCOUNT)")
    logger.info("=" * 60)
    
    exchange = exchange_factory.create_bitget_from_config()
    await exchange.initialize()
    
    engine = TradingEngine(exchange, mode="signals")
    await engine.initialize()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
    ticker = await exchange.get_ticker("BTCUSDT")
    current_price = ticker.last_price
    
    logger.info(f"BTC Price: ${current_price:.2f}")
    
    # –û–ß–ï–ù–¨ –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
    test_order_price = current_price * 0.7  # 30% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
    test_quantity = 0.0001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    position_value = test_order_price * test_quantity  # ~$8-10
    
    logger.info(f"Test order: {test_quantity} BTC @ ${test_order_price:.2f}")
    logger.info(f"Position value: ${position_value:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç Risk Manager
    can_trade, reason = await engine.risk_manager.check_trade_permission(
        symbol="BTCUSDT",
        side="Buy",
        position_value=position_value,
        leverage=1
    )
    
    risk_pct = (position_value / engine.risk_manager.initial_capital) * 100
    logger.info(f"Risk: {risk_pct:.4f}% of capital")
    logger.info(f"Permission: {can_trade}, Reason: {reason}")
    
    if can_trade:
        logger.info("‚úÖ Risk Manager approved this minimal test order")
    else:
        logger.warning(f"‚ùå Even minimal order blocked: {reason}")
    
    await engine.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await test_risk_limits()
        
        # –¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
        await test_with_small_order()
        
        logger.info("\n" + "=" * 60)
        logger.info("üéâ All Risk Manager tests completed!")
        logger.info("=" * 60)
        
        logger.info("\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
        logger.info("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ max_risk_pct –≤ risk.yaml = 2.0 –∏–ª–∏ –±–æ–ª—å—à–µ")
        logger.info("2. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã")
        logger.info("3. Risk Manager –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã")
        logger.info("4. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º 'auto'")
        
    except Exception as e:
        logger.error(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
