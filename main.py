"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vortex Trading Bot v2.1
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
"""

import asyncio
import logging
import signal
import sys
import time
from typing import Optional, Dict, Any, List, Tuple
from datetime import datetime
import traceback

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from core.trading_engine import TradingEngine
from core.position_manager import PositionManager
from core.risk_manager import RiskManager
from exchanges.exchange_manager import exchange_manager
from exchanges.exchange_factory import exchange_factory, create_bybit_adapter, test_all_exchanges
from config.config_loader import config_loader, get_app_config, get_bybit_credentials
from telegram_bot.telegram_bot import TelegramBot


class VortexTradingBot:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
    """
    
    def __init__(self):
        self.logger = logging.getLogger("VortexTradingBot")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.exchange = None
        self.exchange_manager = exchange_manager
        self.trading_engine = None
        self.position_manager = None
        self.risk_manager = None
        self.telegram_bot = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.is_running = False
        self.start_time = time.time()
        self.shutdown_requested = False
        self.trading_enabled = True
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.app_config = get_app_config()
        self.mode = "signals"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∂–∏–º —Å–∏–≥–Ω–∞–ª–æ–≤
        
        # –°—á–µ—Ç—á–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏
        self.signals_count = 0
        self.trades_count = 0
        self._last_warning_time = 0  # –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            self.shutdown_requested = True
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        """
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vortex Trading Bot v2.1...")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–±–∏—Ä–∂–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if not await self._initialize_exchange_manager():
                return False
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏—Ä–∂–∏
            self.exchange = await self.exchange_manager.get_primary_exchange()
            if not self.exchange:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –±–∏—Ä–∂—É")
                return False
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤
            if not await self._initialize_risk_manager():
                return False
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
            if not await self._initialize_position_manager():
                return False
            
            # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
            if not await self._initialize_trading_engine():
                return False
            
            # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            await self._initialize_telegram_bot()
            
            self.is_running = True
            self.logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            return True
            
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _initialize_exchange_manager(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–±–∏—Ä–∂–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            self.logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂
            exchanges_config = config_loader.get_config("exchanges")
            enabled_exchanges = exchanges_config.get("exchanges", {}).get("enabled", ["bybit"])
        
            self.logger.info(f"üîç –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {enabled_exchanges}")
        
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∏—Ä–∂
            if not await self.exchange_manager.initialize():
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏—Ä–∂")
                return False
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not await self._test_exchange_connections():
                self.logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∏—Ä–∂–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                # –ù–µ —Ñ–µ–π–ª–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±–∏—Ä–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        
            self.logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∏—Ä–∂ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏—Ä–∂: {e}")
            return False
    
    async def _test_exchange_connections(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º —á–µ—Ä–µ–∑ exchange_manager"""
        try:
            self.logger.info("üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º...")
        
            all_ok = True
        
            # –ï—Å–ª–∏ exchange_manager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–≥–æ
            if hasattr(self, 'exchange_manager') and self.exchange_manager:
                for exchange_name, adapter in self.exchange_manager.exchanges.items():
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                        server_time = await adapter.get_server_time()
                        if server_time:
                            self.logger.info(f"‚úÖ {exchange_name}: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                        
                            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                            try:
                                balance = await adapter.get_balance()
                                if balance:
                                    self.logger.info(f"   –ë–∞–ª–∞–Ω—Å: {balance.wallet_balance:.2f} USDT")
                            except Exception as e:
                                self.logger.debug(f"   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}")
                        else:
                            self.logger.warning(f"‚ö†Ô∏è {exchange_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞")
                            all_ok = False
                    except Exception as e:
                        self.logger.error(f"‚ùå {exchange_name}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                        all_ok = False
        
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ exchange_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂
                enabled_exchanges = config_loader.get_enabled_exchanges()
            
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bybit
                if "bybit" in enabled_exchanges:
                    bybit_config = config_loader.get_active_exchange_config("bybit")
                    credentials = bybit_config
                
                    if not all([credentials.get("api_key"), credentials.get("api_secret")]):
                        self.logger.warning("‚ö†Ô∏è Bybit API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                        all_ok = False
                    else:
                        self.logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Bybit: env={bybit_config.get('environment', 'demo')}")
                    
                        try:
                            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            test_exchange = BybitAdapter(
                                api_key=credentials["api_key"],
                                api_secret=credentials["api_secret"],
                                testnet=bybit_config.get('environment') == 'demo',
                                recv_window=credentials.get("recv_window", 10000)
                            )
                        
                            if await test_exchange.initialize():
                                self.logger.info("‚úÖ Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω")
                            else:
                                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit")
                                all_ok = False
                        
                            await test_exchange.close()
                        
                        except Exception as e:
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bybit: {e}")
                            all_ok = False
            
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bitget
                if "bitget" in enabled_exchanges:
                    if not await self._test_bitget_connection():
                        all_ok = False
        
            return all_ok
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
            return False

    async def _test_bitget_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitget"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º Bitget –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
            bitget_config = config_loader.get_active_exchange_config("bitget")
        
            if not bitget_config:
                self.logger.warning("‚ö†Ô∏è Bitget –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
            if not all([bitget_config.get("api_key"), 
                       bitget_config.get("api_secret"), 
                       bitget_config.get("api_passphrase")]):
                self.logger.warning("‚ö†Ô∏è Bitget API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return False
        
            is_testnet = bitget_config.get("environment") == "demo"
            self.logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Bitget: testnet={is_testnet}")
        
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                from exchanges.bitget_adapter import BitgetAdapter
            
                bitget_adapter = BitgetAdapter(
                    api_key=bitget_config["api_key"],
                    api_secret=bitget_config["api_secret"],
                    api_passphrase=bitget_config["api_passphrase"],
                    testnet=is_testnet
                )
            
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
                if await bitget_adapter.initialize():
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    server_time = await bitget_adapter.get_server_time()
                    if server_time:
                        self.logger.info("‚úÖ Bitget –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                    
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
                        try:
                            balance = await bitget_adapter.get_balance()
                            if balance:
                                self.logger.info(f"   –ë–∞–ª–∞–Ω—Å: {balance.wallet_balance:.2f} USDT")
                        except Exception as e:
                            self.logger.debug(f"   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}")
                    
                        await bitget_adapter.close()
                        return True
                    else:
                        self.logger.warning("‚ö†Ô∏è Bitget: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞")
                        await bitget_adapter.close()
                        return False
                else:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Bitget –∞–¥–∞–ø—Ç–µ—Ä")
                    return False
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bitget –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
                return False
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bitget: {e}")
            return False
    
    async def _initialize_risk_manager(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤"""
        try:
            self.logger.info("üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
            balance = await self.exchange.get_balance()
            initial_capital = balance.wallet_balance if balance else 10000.0
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤
            self.risk_manager = RiskManager(
                exchange=self.exchange,
                initial_capital=initial_capital
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            if not await self.risk_manager.initialize():
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤")
                return False
            
            self.logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤: {e}")
            return False
    
    async def _initialize_position_manager(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
        try:
            self.logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π...")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π
            self.position_manager = PositionManager(exchange=self.exchange)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–∏—Ä–∂–µ–π
            await self.position_manager.update_positions()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
            positions_summary = self.position_manager.get_positions_summary()
            self.logger.info(
                f"üìà –ù–∞–π–¥–µ–Ω–æ {positions_summary['total_positions']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π, "
                f"–æ–±—â–∏–π P&L: {positions_summary['total_pnl_percent']:+.2f}%"
            )
            
            self.logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False
    
    async def _initialize_trading_engine(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        try:
            self.logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            strategies_config = config_loader.get_config("strategies")
            self.mode = strategies_config.get("active_strategies", {}).get("mode", "signals")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π risk_manager
            self.trading_engine = TradingEngine(
                exchange=self.exchange,
                risk_manager=self.risk_manager,
                mode=self.mode
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            if not await self.trading_engine.initialize():
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫")
                return False
            
            self.logger.info(f"‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ: {self.mode}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")
            return False
    
    async def _initialize_telegram_bot(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            self.logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º telegram.yaml
            telegram_config = config_loader.get_config("telegram")
            bot_config = telegram_config.get("bot", {})
            
            token = bot_config.get("token")
            chat_id = bot_config.get("chat_id")
            enabled = bot_config.get("enabled", True)
            
            if token and chat_id and enabled:
                self.logger.info(f"üì± –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram: token={token[:10]}..., chat_id={chat_id}")
                
                self.telegram_bot = TelegramBot(
                    token=token,
                    chat_id=chat_id,
                    trading_bot_instance=self
                )
                
                if await self.telegram_bot.initialize():
                    self.logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (telegram.yaml)")
                    return True
                else:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞")
                    return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
            
            # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
            elif not token or not chat_id:
                try:
                    from telegram_cfg import TELEGRAM_TOKEN, TELEGRAM_CHAT_ID
                    if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
                        self.telegram_bot = TelegramBot(
                            token=TELEGRAM_TOKEN,
                            chat_id=TELEGRAM_CHAT_ID,
                            trading_bot_instance=self
                        )
                        
                        if await self.telegram_bot.initialize():
                            self.logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (legacy config)")
                            return True
                        else:
                            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞ (legacy)")
                            return True
                    else:
                        self.logger.info("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ telegram_cfg.py")
                        return True
                except ImportError:
                    self.logger.info("‚ö†Ô∏è –§–∞–π–ª telegram_cfg.py –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ telegram.yaml –Ω–µ–ø–æ–ª–Ω—ã–π")
                    return True
            else:
                self.logger.info("‚ö†Ô∏è Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return True
                
        except Exception as e:
            self.logger.warning(f"Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
    
    async def test_all_exchanges(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –±–∏—Ä–∂–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        results = await test_all_exchanges()
        
        for exchange_name, result in results.items():
            status = "‚úÖ" if result.get("overall") else "‚ùå"
            self.logger.info(f"{status} {exchange_name}: {result}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.logger.info("üéØ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            if self.telegram_bot:
                await self.telegram_bot.send_startup_message()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = []
            
            # 1. –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            trading_task = asyncio.create_task(self.trading_engine.run())
            tasks.append(trading_task)
            
            # 2. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            positions_task = asyncio.create_task(self._position_update_loop())
            tasks.append(positions_task)
            
            # 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
            risk_task = asyncio.create_task(self._risk_monitoring_loop())
            tasks.append(risk_task)
            
            # 4. Telegram –±–æ—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if self.telegram_bot:
                telegram_task = asyncio.create_task(self.telegram_bot.run())
                tasks.append(telegram_task)
            
            # 5. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_task = asyncio.create_task(self._main_monitoring_loop())
            tasks.append(monitor_task)
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            await self.shutdown()
    
    async def _position_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        while self.is_running and not self.shutdown_requested:
            try:
                await self.position_manager.update_positions()
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
                await asyncio.sleep(60)
    
    async def _risk_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            while not self.shutdown_requested and self.is_running:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
                    risk_status = await self.trading_engine.get_risk_status()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    if not risk_status.get("trading_allowed", True):
                        halt_reason = risk_status.get("halt_reason", "Unknown")
                        self.logger.warning(f"‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {halt_reason}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                        if self.telegram_bot:
                            await self._send_risk_alert(halt_reason)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
                    await self._check_risk_usage_warnings(risk_status)
                    
                    await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤: {e}")
                    await asyncio.sleep(60)
                    
        except asyncio.CancelledError:
            self.logger.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _check_risk_usage_warnings(self, risk_status: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        try:
            if not self.telegram_bot:
                return
            
            daily = risk_status.get("daily", {})
            weekly = risk_status.get("weekly", {})
            positions = risk_status.get("positions", {})
            
            warnings = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 80%+)
            if daily.get("loss_usage_pct", 0) >= 80:
                warnings.append(f"‚ö†Ô∏è –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞: {daily.get('loss_usage_pct', 0):.0f}%")
            
            if daily.get("drawdown_usage_pct", 0) >= 80:
                warnings.append(f"‚ö†Ô∏è –î–Ω–µ–≤–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {daily.get('drawdown_usage_pct', 0):.0f}%")
            
            if daily.get("trades_usage_pct", 0) >= 80:
                warnings.append(f"‚ö†Ô∏è –î–Ω–µ–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {daily.get('trades_usage_pct', 0):.0f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 80%+)
            if weekly.get("loss_usage_pct", 0) >= 80:
                warnings.append(f"‚ö†Ô∏è –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞: {weekly.get('loss_usage_pct', 0):.0f}%")
            
            if weekly.get("drawdown_usage_pct", 0) >= 80:
                warnings.append(f"‚ö†Ô∏è –ù–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {weekly.get('drawdown_usage_pct', 0):.0f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 90%+)
            if positions.get("count_usage_pct", 0) >= 90:
                warnings.append(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {positions.get('count_usage_pct', 0):.0f}%")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if warnings:
                await self._send_risk_warnings(warnings)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —Ä–∏—Å–∫–∞—Ö: {e}")
    
    async def _send_risk_alert(self, halt_reason: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            if not self.telegram_bot:
                return
            
            message = (
                "üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï*\n\n"
                "üõë **–¢–û–†–ì–û–í–õ–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê**\n\n"
                f"**–ü—Ä–∏—á–∏–Ω–∞:** {halt_reason}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/risk` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ "
                "`/risk_reset` –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"
            )
            
            await self.telegram_bot.application.bot.send_message(
                chat_id=self.telegram_bot.chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def _send_risk_warnings(self, warnings: List[str]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç–∞–º"""
        try:
            if not self.telegram_bot or not warnings:
                return
            
            # –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            current_time = time.time()
            if current_time - self._last_warning_time < 3600:  # 1 —á–∞—Å
                return
            
            self._last_warning_time = current_time
            
            message = (
                "‚ö†Ô∏è *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –†–ò–°–ö–ê–•*\n\n"
                "–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç–∞–º:\n\n"
            )
            
            for warning in warnings:
                message += f"‚Ä¢ {warning}\n"
            
            message += (
                "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/risk` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ "
                "`/risk_set` –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"
            )
            
            await self.telegram_bot.application.bot.send_message(
                chat_id=self.telegram_bot.chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —Ä–∏—Å–∫–∞—Ö: {e}")
    
    async def _main_monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        while self.is_running and not self.shutdown_requested:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                await self._log_system_status()
                
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
                await asyncio.sleep(600)
    
    async def _log_system_status(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∏—Å–∫–∞—Ö"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            uptime = time.time() - self.start_time
            self.logger.info(
                f"üìä System Status: "
                f"Uptime: {uptime/3600:.1f}h, "
                f"Mode: {self.mode}, "
                f"Trading: {'‚úÖ' if self.trading_enabled else 'üõë'}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–∞—Ö
            if self.trading_engine:
                risk_status = await self.trading_engine.get_risk_status()
                
                if risk_status and "error" not in risk_status:
                    daily = risk_status.get("daily", {})
                    weekly = risk_status.get("weekly", {})
                    
                    self.logger.info(
                        f"üìä Risk Status: "
                        f"Daily P&L: {daily.get('pnl', 0):+.2f}, "
                        f"Weekly P&L: {weekly.get('pnl', 0):+.2f}, "
                        f"Trading: {'‚úÖ' if risk_status.get('trading_allowed', True) else 'üõë'}"
                    )
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
                    if daily.get("loss_usage_pct", 0) > 50 or weekly.get("loss_usage_pct", 0) > 50:
                        self.logger.warning(
                            f"‚ö†Ô∏è High risk usage: "
                            f"Daily loss: {daily.get('loss_usage_pct', 0):.0f}%, "
                            f"Weekly loss: {weekly.get('loss_usage_pct', 0):.0f}%"
                        )
                        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–æ–≤: {e}")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∏—Å–∫–æ–≤"""
        try:
            self.logger.info("üõë –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.shutdown_requested = True
            self.is_running = False
            self.trading_enabled = False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
            if self.risk_manager and self.trading_engine:
                try:
                    final_status = await self.trading_engine.get_risk_status()
                    if final_status and "error" not in final_status:
                        daily_pnl = final_status.get("daily", {}).get("pnl", 0)
                        weekly_pnl = final_status.get("weekly", {}).get("pnl", 0)
                        
                        self.logger.info(
                            f"üìä Final Risk Status: "
                            f"Daily P&L: {daily_pnl:+.2f}, "
                            f"Weekly P&L: {weekly_pnl:+.2f}"
                        )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∏—Å–∫–æ–≤: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if self.telegram_bot:
                await self.telegram_bot.send_shutdown_message()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            if self.trading_engine:
                await self.trading_engine.stop()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∏—Ä–∂–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.exchange:
                await self.exchange.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Telegram –±–æ—Ç–∞
            if self.telegram_bot:
                await self.telegram_bot.stop()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            await asyncio.sleep(2)
            
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status = {
                "is_running": self.is_running,
                "mode": self.mode,
                "uptime_seconds": time.time() - self.start_time,
                "timestamp": time.time(),
                "exchange": "Bybit" if self.exchange else "N/A",
                "signals_count": self.signals_count,
                "positions_count": 0
            }
            
            # –°—Ç–∞—Ç—É—Å –±–∏—Ä–∂–∏
            if self.exchange:
                try:
                    balance = await self.exchange.get_balance()
                    if balance:
                        status["balance"] = {
                            "wallet_balance": balance.wallet_balance,
                            "available_balance": balance.available_balance
                        }
                except Exception as e:
                    self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π
            if self.position_manager:
                try:
                    positions_summary = self.position_manager.get_positions_summary()
                    status["positions_count"] = positions_summary.get("total_positions", 0)
                    status["positions"] = positions_summary
                except Exception as e:
                    self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –°—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤
            if self.trading_engine:
                try:
                    risk_status = await self.trading_engine.get_risk_status()
                    status["risk_status"] = risk_status
                except Exception as e:
                    self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤: {e}")
            
            return status
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e)}
    
    def set_mode(self, new_mode: str) -> bool:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
        try:
            if new_mode not in ["auto", "signals"]:
                return False
            
            old_mode = self.mode
            self.mode = new_mode
            
            if self.trading_engine:
                self.trading_engine.mode = new_mode
            
            self.logger.info(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: {old_mode} ‚Üí {new_mode}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    # –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° TELEGRAM –ë–û–¢–û–ú
    async def get_risk_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞"""
        try:
            if self.trading_engine:
                return await self.trading_engine.get_risk_status()
            else:
                return {"error": "Trading engine not initialized"}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–æ–≤: {e}")
            return {"error": str(e)}
    
    async def set_risk_parameter(self, path: str, value: Any) -> Tuple[bool, str]:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–∏—Å–∫–∞"""
        try:
            if self.trading_engine:
                return await self.trading_engine.set_risk_parameter(path, value)
            else:
                return False, "Trading engine not initialized"
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–∏—Å–∫–∞: {e}")
            return False, f"Error: {e}"
    
    async def reset_daily_risk_counters(self) -> bool:
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–∏—Å–∫–æ–≤"""
        try:
            if self.trading_engine:
                return await self.trading_engine.reset_daily_risk_counters()
            else:
                return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
            return False
    
    async def reset_weekly_risk_counters(self) -> bool:
        """–°–±—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–∏—Å–∫–æ–≤"""
        try:
            if self.trading_engine:
                return await self.trading_engine.reset_weekly_risk_counters()
            else:
                return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    logger = logging.getLogger("Main")
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Vortex Trading Bot v2.1...")
    
    bot = None
    try:
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        try:
            config_loader.load_all_configs()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return 1
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = VortexTradingBot()
        
        if not await bot.initialize():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return 1
        
        # 4. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        await bot.run()
        
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        return 0
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        return 0
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return 1
    finally:
        if bot:
            await bot.shutdown()


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
        sys.exit(130)
    except Exception as e:
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)